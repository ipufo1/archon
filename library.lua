local Menu = {} do -- this is a sloppy mess
    local Game = game
    local Enum = Enum
    local Tick = tick

    local GetDescendants = Game.GetDescendants
    local GetChildren = Game.GetChildren
    local GetService = Game.GetService
    local Destroy = Game.Destroy
    local IsA = Game.IsA

    local GetCustomAsset = getcustomasset
    local SetMetaTable = setmetatable
    local Decode = crypt.base64.decode

    local IsFile = isfile
    local ListFiles = listfiles
    local ReadFile = readfile
    local WriteFile = writefile
    local LoadFile = loadfile
    local DelFile = delfile

    local IsFolder = isfolder
    local MakeFolder = makefolder

    local NewVector2 = Vector2.new
    local NewInstance = Instance.new
    local NewUDim2 = UDim2.new
    local NewUDim = UDim.new
    local NewRect = Rect.new

    local EmptyUDim2 = NewUDim2(0, 0, 0, 0)
    local EmptyFunction = function() end

    local NewRGB = Color3.fromRGB
    local FromHSV = Color3.fromHSV

    local ToHSV = NewRGB().ToHSV
    local ToHex = NewRGB().ToHex

    local NewColorSequence = ColorSequence.new
    local NewNumberSequence = NumberSequence.new
    local NewNumberKeypoint = NumberSequenceKeypoint.new

    local NewTweenInfo = TweenInfo.new
    local NewFont = Font.new

    local Format = string.format
    local Lower = string.lower
    local Upper = string.upper
    local Gsub = string.gsub
    local Split = string.split
    local StringFind = string.find
    local Match = string.match

    local Remove = table.remove
    local Concat = table.concat
    local Unpack = table.unpack
    local Clear = table.clear
    local Find = table.find
    local Sort = table.sort

    local Round = math.round
    local Clamp = math.clamp
    local Sin = math.sin

    local Cancel = task.cancel
    local Spawn = task.spawn
    local Delay = task.delay
    local Wait = task.wait

    local Wrap = coroutine.wrap


    local TextService = GetService(Game, 'TextService')
    local UserInputService = GetService(Game, 'UserInputService')
    local TweenService = GetService(Game, 'TweenService')
    local HttpService = GetService(Game, 'HttpService')
    local RunService = GetService(Game, 'RunService')
    local Players = GetService(Game, 'Players')
    local CoreGui = GetService(Game, 'CoreGui')
    local Workspace = GetService(Game, 'Workspace')

    local JSONDecode = HttpService.JSONDecode
    local JSONEncode = HttpService.JSONEncode


    local CurrentCamera = Workspace.CurrentCamera
    local ScreenSize = CurrentCamera.ViewportSize
    local RenderStepped = RunService.RenderStepped
    local LocalPlayer = Players.LocalPlayer
    local Mouse = LocalPlayer:GetMouse()

    local PlayerAdded = Players.PlayerAdded
    local PlayerRemoving = Players.PlayerRemoving

    do
        local BasePath = 'Archon'
        if not BasePath then print("no bse path") end;

        Menu = {
            BasePath = BasePath,
            CurrentZIndex = 0,
            Clear = true,

            Folders = {
                Fonts = Format('%s/Fonts', BasePath),
                Images = Format('%s/Images', BasePath),
                Configs = Format('%s/Configs', BasePath),
                Scripts = Format('%s/Scripts', BasePath),
            },

            EncodedAssets = {
                ['Rage'] = 'iVBORw0KGgoAAAANSUhEUgAAABcAAAAUCAMAAABRYFY8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADDUExUReHh4fLy8qCgoNDQ0PHx8fj4+J6enpGRkdnZ2bW1tZCQkLa2tvT09NfX15eXl83NzY6OjtLS0vDw8JaWlrKysqGhodTU1NPT0+7u7sXFxa+vr+3t7bGxscPDw9zc3MnJybu7u97e3rm5ufX19ZOTk8DAwMbGxtra2sLCwsrKyr6+vv///8jIyKWlpd3d3aSkpOfn56enp+bm5p2dnerq6uDg4Ojo6K6urrS0tJqamqysrKqqqqioqOTk5OPj48zMzAAAALEO9BsAAABBdFJOU/////////////////////////////////////////////////////////////////////////////////////8AMFXsxwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAABF0lEQVQoU3XQfVeCMBQG8AFDZKLkwDKFYkoZTENJe7OX5/t/qu4Gnf5q5+yM/c7uw+4Y/sZ/306/mvHrrscd3+HeoN93Hgx5KOi8GEVjYcX6hMcXtJgcMZWJIeNCpsDsUvryygXCuakwHo+Ba7kQyyDjOXBz23kSCRTKBFEpWyFYl9bv7ukHAZBvHoDSSVAV1pmLmsojrTUHtgV2j4SDZr9rNilqYq1XCIfNoW2e2FQtlTqq0rNeJaejIokp5zmBt0Bq/QWvMd5am++leFd0PWK6MDtjFFs/0NxTk+f6g1r/BNrGOr4W9ELfPp1fV9Rreur6wsQJhLTxWs9FGZkHMo7M3fasdT7LDFkHeK9U0EHvrFetTTiAH/+hUOSH/rO0AAAAAElFTkSuQmCC',
                ['Legit'] = 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAByUExURfz8/P////X19aenp3x8fKampn9/f319fZ6enuHh4W9vb/f3983Nzbm5ubW1taSkpLy8vLq6upubm3p6eqOjo66urre3t/n5+YODg5+fn6GhoZGRkYCAgKysrJCQkHV1daqqqo6OjpmZmW5ubq+vrwAAAA7cW1QAAAAmdFJOU/////////////////////////////////////////////////8Ap3qBvAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAAAvUlEQVQoUz3Q2RKCMAwFUMKiiGxRQCmLgOb/f9HctMN9aMOZknQaSUhEFIdSTiSNFQmdmAJTLRLKAl5AyBXmMQ+EqBnquZv1LO5U4hAQJhVR3VDLD4/PMFYa6op+AL6sE3t7jz1nbtI7W8ykY6Q6EXZibFaZyZwvnI2rH/TxptlqXfyVSGc4N4vsfARUbcUxj9+9WvANTKjkX8/cb2wGxBscA8bW+NfQ3kUkY7YdicQbejorNDYImZhXX4n8Adw8I09YeTHNAAAAAElFTkSuQmCC',
                ['Visuals'] = 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAABpUExURaKiorS0tP///9vb29bW1tTU1LKysqCgoKurq+bm5srKyvPz85KSkuHh4Z+fn9LS0p2dnZCQkOrq6ri4uLGxsaioqMjIyPHx8ZSUlN3d3aamptjY2La2tu3t7ZaWlomJibq6uuzs7AAAAKcragsAAAAjdFJOU/////////////////////////////////////////////8AZimDlgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAAAhklEQVQoU23Q2RKDMAgF0Hi1alfTRbtv/P9HFgidVsx9YMKZDEwSaJRQaNXzLyi5eKwwm2IN1BNsAGSx8Ngyzj0uGOFxmcGVmMd1BmWNx02y7h/tHmKIJrRN84AdhT26Q4z9cDQCTvzMs52/uegvXa1L6XmSLLpZz7k/ZLxuf77eSlUjHdEHmjsj/hleoDUAAAAASUVORK5CYII=',
                ['Misc 2'] = 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAB7UExURdXV1f///729vcHBwdPT05iYmN/f366urq+vr+Hh4ZKSkqCgoJqamvb29vDw8IqKiu7u7uzs7IyMjLm5udnZ2YSEhN3d3eLi4tfX1+jo6IaGhubm5qampqSkpKioqNvb24iIiOrq6rOzs/Ly8pycnKKios3NzcvLywAAAASGXvUAAAApdFJOU/////////////////////////////////////////////////////8AUvQghwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAAAr0lEQVQoU12Q2RaCMAxEUxC14IbIIuKCa/7/C52kATnOAzNzT0vbEIvIRWKxm4Uqn8Q5N18sPSwdYYZmWo1wbQTaGNzuDKjyPWBsZaKCLBxK5rKyQiFU8ivmWktDfBTHOlEr+YSDOgmBMUvuAM//8AJ4ldAGdpOcD1eqA+y1+OFKNda2eiZEA53ojmemuRWVxxYdyMMA1EtX+DQCJSOUIVP2amC/IfPbFWKR++C9zF+FzxrPW2+fNAAAAABJRU5ErkJggg==',
                ['Skins'] = 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAABpUExURY6Ojubm5v///4SEhLe3t9vb24iIiOTk5IqKipSUlKqqqqysrNfX18fHx5CQkPz8/KampoyMjMHBwd/f3/j4+Pb29s/Pz66urru7u5KSksPDw9nZ2fLy8ujo6L29vcnJydHR0ZiYmAAAAOrFeU4AAAAjdFJOU/////////////////////////////////////////////8AZimDlgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAAAjklEQVQoU23M2RKCQAxE0di4jKAi7uKC5v8/0myjxZT9lHsKhrgcTVBiNQVmBc4XANIYl0KoeYSN2kqejZZVazXI9UN7DtjI+cXUmm31ztgZYWcRmNz2XoEHs6NH4MkMySJjbdbZLRM8A5cr0ObvFKWBvrkF6Ih7+zXSR3z/h2aPSB891YaoGAm93hE+5g+4GSbsUeYFiAAAAABJRU5ErkJggg==',
                ['Scripts'] = 'iVBORw0KGgoAAAANSUhEUgAAABkAAAAUCAMAAABPqWaPAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAABOUExURY6Ojv///5CQkM3NzaampoiIiPr6+piYmOTk5KqqqrOzs8XFxa6uruLi4p6enpSUlJycnNXV1dnZ2d/f3+bm5qysrOjo6OHh4cfHxwAAANJbGbIAAAAadFJOU/////////////////////////////////8AFCIA2gAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAAAq0lEQVQoU12Q2xLCMAhEs9WaVq1WrRf+/0eFhcTEfWGZwzALSVolYAgrPdkB+7B/BMAYticjcAgbJE8zmyNwEjkv2RojF11iXibgypWrEwM3Ep+4O0oEC0EGHlY3orRqmQgs85OGSG8rIJaZXmqNbN42mUl+2zyzybeJISbwzAW0qbUQ1NTlUs38JnFAInnR79TMzXdcOlr/bKqk+7Opkhn4hHVVMuhtYU0iX4naIxtW0rX6AAAAAElFTkSuQmCC',
                ['Checkmark 3'] = 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAJCAMAAAAxZj1mAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAGUExURf///wAAAFXC034AAAACdFJOU/8A5bcwSgAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAAALUlEQVQYV02LQRIAAAgB+f+ni9Tk0CwCrgCegfS4G9uJ/51XyX2sWItjz8NkAQ/bAEMJO5uCAAAAAElFTkSuQmCC',
                ['Gradient 7'] = 'iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAYdEVYdFNvZnR3YXJlAFBhaW50Lk5FVCA1LjEuNvzRx68AAAC2ZVhJZklJKgAIAAAABQAaAQUAAQAAAEoAAAAbAQUAAQAAAFIAAAAoAQMAAQAAAAMAAAAxAQIAEAAAAFoAAABphwQAAQAAAGoAAAAAAAAAvm4AAOgDAAC+bgAA6AMAAFBhaW50Lk5FVCA1LjEuNgADAACQBwAEAAAAMDIzMAGgAwABAAAAAQAAAAWgBAABAAAAlAAAAAAAAAACAAEAAgAEAAAAUjk4AAIABwAEAAAAMDEwMAAAAACFz+9xP1kKqwAAAE5JREFUKFNjZGBg4ANiggCkUBLCxApA8v9hDHUQgxAAKTSGMPEDkEIHCBM/ACn0hTDxA5DCKAgTPwApTIMw8QOQwhIIEz9gAmJuwpiBGwAHegO8VT2SxQAAAABJRU5ErkJggg==',
                ['Down Arrow 2'] = 'iVBORw0KGgoAAAANSUhEUgAAAAkAAAAGCAMAAAAmGUT3AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAqUExURTw8PCcnJz09PXJycnh4eCoqKikpKXNzc3d3dzk5OYCAgCgoKF1dXQAAAG9VUWgAAAAOdFJOU/////////////////8ARcDcyAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIDUuMS42/NHHrwAAALZlWElmSUkqAAgAAAAFABoBBQABAAAASgAAABsBBQABAAAAUgAAACgBAwABAAAAAwAAADEBAgAQAAAAWgAAAGmHBAABAAAAagAAAAAAAACjkwAA6AMAAKOTAADoAwAAUGFpbnQuTkVUIDUuMS42AAMAAJAHAAQAAAAwMjMwAaADAAEAAAABAAAABaAEAAEAAACUAAAAAAAAAAIAAQACAAQAAABSOTgAAgAHAAQAAAAwMTAwAAAAANOXZoZ/N0zsAAAAMUlEQVQYVxWJSRIAIAzCUGutC///rsAhkwxAo9c6RkxJxkJWJA2ItV3QU0di431J8gMxyQHT0wfSFAAAAABJRU5ErkJggg==',
                ['Gradient'] = 'iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0CAYAAADL1t+KAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAYdEVYdFNvZnR3YXJlAFBhaW50Lk5FVCA1LjEuMWK1UgwAAAC2ZVhJZklJKgAIAAAABQAaAQUAAQAAAEoAAAAbAQUAAQAAAFIAAAAoAQMAAQAAAAIAAAAxAQIAEAAAAFoAAABphwQAAQAAAGoAAAAAAAAASRkBAOgDAABJGQEA6AMAAFBhaW50Lk5FVCA1LjEuMQADAACQBwAEAAAAMDIzMAGgAwABAAAAAQAAAAWgBAABAAAAlAAAAAAAAAACAAEAAgAEAAAAUjk4AAIABwAEAAAAMDEwMAAAAADdc0paBygUuAAACFFJREFUeF7t2kGNVEEUhtFXJCzHAAZYsCIDewxgAAFjAAPoATP4mQVzSbWC3nTqyznJn74OvlTnreu6nmYAwMHe3X4BgIMJOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AASs2Yd9AgCn8kIHgABBB4AAQQeAAEEHeJz3sy+zr7cb7iboAI/zafZn9vt2w9185Q7wOP9f5Z9n/2Z/Z68zuIugA0CAv9wBIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgYM0+7hMAOJUXOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAECDoABAg6AAQIOgAErNnzPgGAU3mhA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0DAmn3bJwBwKi90AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAhYs+/7BABO5YUOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAGCDgABgg4AAYIOAAFr9mOfAMCpvNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIEDQASBA0AEgQNABIGDNXvYJAJzKCx0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAtbs5z4BgFN5oQNAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAgKADQICgA0CAoANAwJr92icAcCovdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAAIEHQACBB0AAgQdAA43nW9AcyiC/DvyBpUAAAAAElFTkSuQmCC',
                ['Settings 2'] = 'iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAMAAAAolt3jAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAB4UExURaqqqt7e3uHh4dDQ0MXFxeTk5Le3t8TExKurq7S0tODg4M7OzqSkpLm5udLS0qmpqd/f38/Pz5GRkczMzI+Pj+Li4tvb27q6upSUlL+/v5aWltjY2MjIyJ+fn8vLy8nJybGxsZqamqOjo9ra2qioqMDAwKKiogAAANZscJgAAAAodFJOU////////////////////////////////////////////////////wC+qi4YAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGHRFWHRTb2Z0d2FyZQBQYWludC5ORVQgNS4xLjb80cevAAAAtmVYSWZJSSoACAAAAAUAGgEFAAEAAABKAAAAGwEFAAEAAABSAAAAKAEDAAEAAAADAAAAMQECABAAAABaAAAAaYcEAAEAAABqAAAAAAAAAKOTAADoAwAAo5MAAOgDAABQYWludC5ORVQgNS4xLjYAAwAAkAcABAAAADAyMzABoAMAAQAAAAEAAAAFoAQAAQAAAJQAAAAAAAAAAgABAAIABAAAAFI5OAACAAcABAAAADAxMDAAAAAA05dmhn83TOwAAACASURBVBhXNY7ZEoMgEAQHkzWHIObAaCK5zfz/H2ZBnQe6p2p3CzAFplhNkt+1iGQBy812t9daWVcStlZd4mEzmybjgONJ4UinKACeg7TpSity0VNdEJOqEemJ602nBnJIuyViwpI74mNWTYigf77eH/W+89/5k6PWLFP9VfWoIP+1qQ7s7vYi6gAAAABJRU5ErkJggg==',
                ['Colorpicker Hue2'] = 'iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAMAAABrrFhUAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAwBQTFRF0B8R0CQR0CcR0CwR0DER0DUR0DoQ0D8Q0EQQ0EkQ0E8Q0FQP0FkP0F4P0GMP0GgP0G0P0HEO0HYO0HoO0H4O0IIO0IYO0IoOz40OzpAOzZQOzZcOzJsOy58OyqIOyaYOyakOyKwOxq8OxrIOxLUOw7kOwrsOwL4Ov8AOvcMOu8UOuccOt8kOtMwOss0OsM8OrdAOqtAOptAOo9AOn9AOmtAOltAOkdAOjdAOiNAOg9AOftAOedAOc9AOb9AOatAOZNAOX9AOWtAOVtAOUdAOTdAOSNAORNAOQdAOPdAOOtAON9APNNARMdATL9AULNAXKtAYJ9AbJtAeJNAgItAjINAmHtAoHdArG9AuG9AxGdA1F9A4F9A7FtA/FNBDFNBGE9BKEdBNEdBQENBUD9BYDtBcDtBgDtBkDtBoDtBsDtBxDtB2DtB6DtCADtCEDtCKDtCPDtCUDtCaDtCeDtCjDtCoDtCtDtCyDtC2DtC6DtC/DtDCDtDGDtDJDtDNDtDPDtDQDs3QDsrQDsfQDsPQDsDQDrzQDrjQDrPQDq7QDqrQDqXQDqDQDpvQDpbQDpDQDovQDobQDoHQDn3QDnfQDnPQDm7QDmnQDmXQDmHQDl3QD1rQEFbQEVLQEU/QEkvQE0jQFETQFEHQFT7QFjrQFzfQGDTQGTHQGy7QHCrQHSjQHiXQISLQIiDQJB3QJhvQJxjQKhbQKxTQLhPQMRHQNA/QNw7QOg7QPQ7QQQ7QRA7QSQ7QTQ7QUQ7QVw7QWw7QYA7QZQ7Qag7Qbw7QdA7QeQ7Qfg7Qgw7QiA7QjQ7QkQ7QlQ7Qmg7QnQ7QoQ7QpQ7QqA7Qqw7Qrg7OsA7Nsw7Ktg7IuA7Gug7DvA7AvQ69wA67wQ64ww61ww6yxQ6uxg6rxw6nyQ6kyQ6hyg6dzA6azQ6WzQ6Szg6Ozw6K0A6H0A6D0A6A0A570A530A5z0A5u0A5p0A5k0A5f0A5a0A5V0A5Q0A5K0A5F0A5A0A470A420A4x0A4t0A4o0A4k0A4gZ3zqwwAAA+hJREFUeJzlzlMCAAQCQMFetm3bNjbbtm3bm23btm3btm13jPloTjAN8B9XeoA1oB5gDaQHWAPrAdYgeoA1qB5gDaYHWIPrAdYQeoA1pB5gDaUHWEPrAdYweoA1rB5gDacHWMPrAdYIeoA1oh5gjaQHWCPrAdYoeoA1qh5gjaYHWKPrAdYYeoA1ph5gjaUHWGPrAdY4eoA1rh5gjacHWOPjgNYEeoA1oR5gTaQHWBPrAdYkeoA1qR5gTaYHWJPrAdYUeoA1pR5gTaUHWFPrAdY0eoA1rR5gTacHWNPrAdYMeoA1ox5gzaQHWDPrAdYseoA1qx5gzaYHWLPrAdYceoA1px5gzaUHWHPrAdY8eoA1rx5gzacHWPPrAdYCeoD1Pz3AWlAPsBbSA6yF9QBrET3AWlQPsBbTA6zF9QBrCT3AWlIPsJbSA6yl9QBrGT3AWlYPsJbTA6zl9QBrBT3AWlEPsFbSA6yV9QBrFT3AWlUPsFbTA6zV9QBrDT3AWlMPsNbSA6y19QBrHT3AWlcPsNbTA6z19QBrAz3A2lAPsDbSA6yN9QBrEz3A2lQPsDbTA6zN9QBrCz3A2lIPsLbSA6yt9QBrGz3A2lYPsLbTA6zt9QBrBz3A2lEPsHbSA6yd9QBrFz3A2lUPsHbTA6zd9QBrDz3A2lMPsPbSA6y99QBrHz3A2lcPsPbTA6z99QDrAD3AOlAPsA7SA6yD9QDr/3qAdYgeYB2qB1iH6QHW4XqAdYQeYB2pB1hH6QHW0XqAdYweYB2rB1jH6QHW8XqAdYIeYJ2oB1gn6QHWyXqAdYoeYJ2qB1in6QHW6XqAdYYeYJ2pB1hn6QHW2XqAdY4eYJ2rB1jn6QHW+XqAdYEeYF2oB1gX6QHWxXqAdYkeYF2qB1iX6QHW5XqAdYUeYF2pB1hX6QHW1XqAdY0eYF2rB1jX6QHW9XqAdYMeYN2oB1g36QHWzXqAdYseYN2qB1i36QHW7XqAdYceYN2pB1h36QHW3XqAdY8eYN2rB1j36QHW/XqA9YAeYD2oB1gP6QHWw3qA9YgeYD2qB1iP6QHW43qA9YQeYD2pB1hP6QHW03qA9YweYD2rB1jP6QHW83qA9YIeYL2oB1gv6QHWy3qA9YoeYL2qB1iv6QHW63qA9YYeYL2pB1hv6QHW23qA9Y4eYL2rB1jv6QHW+3qA9YEeYH2oB1gf6QHWx3qA9YkeYH2qB1if6QHW53qA9YUeYH2pB1hf6QHW13qA9Y0eYH2rB1jf6QHW93qA9YMeYP2oB1g/6QHWz3qA9YseYP2qB1i/6QHW73qA9YceYP2pB1h/6QHW33qA9Y8eYP8CNreAgc3PpHIAAAAASUVORK5CYII=',
                ['Colorpicker Overlay 6'] = 'iVBORw0KGgoAAAANSUhEUgAAAKAAAAAOCAMAAACfB+eBAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAbcgAAAJF0Uk5T+Pf29fTz8vHw7+7t7Ovq6ejn5uXk4+Hg397d3NvZ2NfW1NPS0M/OzcvKyMfGxMPCwL+9vLq5t7a1s7Kwr62rqqinpaSioZ+dnJqZl5WUkpGPjYyKiIeFhIKAfnx4dnJvbWlnZGBeW1hVUk9MSkdEQj88Ojc1MjAtKykmJCIfHRsZFxUUEhAODAsJCAYFBAIBAIu0/SkAAAAySURBVHicY2RgZGAEAQg5KAADMmAcdSDpYNSBlIJRB1IKRh1IKRh1IKVg1IGUgqHlQAAfxgfvYDswOgAAAABJRU5ErkJggg==',
                ['Colorpicker Valsat 3'] = '',
                ['Verdana Bold'] = '',
                ['Archon2'] = '',
            },

            Flags = {},
            Cache = {},

            Fonts = {},
            Images = {},
            Theme = {},

            Renders = {},
            Connections = {},

            LoadedScripts = {},

            KeyCodes = {
                'Q',
                'W',
                'E',
                'R',
                'T',
                'Y',
                'U',
                'I',
                'O',
                'P',
                'A',
                'S',
                'D',
                'F',
                'G',
                'H',
                'J',
                'K',
                'L',
                'Z',
                'X',
                'C',
                'V',
                'B',
                'N',
                'M',
                'One',
                'Two',
                'Three',
                'Four',
                'Five',
                'Six',
                'Seven',
                'Eight',
                'Nine',
                'Zero',
                'Minus',
                'Equals',
                'F1',
                'F2',
                'F3',
                'F4',
                'F5',
                'F6',
                'F7',
                'F8',
                'F9',
                'F10',
                'F11',
                'F12',
                'Insert',
                'Tab',
                'Home',
                'End',
                'LeftAlt',
                'LeftControl',
                'LeftShift',
                'RightAlt',
                'RightControl',
                'RightShift',
                'CapsLock',
            },
            InputShorts = {
                ['MouseButton1'] = 'LMB',
                ['MouseButton2'] = 'RMB',
                ['MouseButton3'] = 'MMB',
                ['Insert'] = 'Ins',
                ['Minus'] = '-',
                ['Equals'] = '=',
                ['LeftAlt'] = 'LAlt',
                ['LeftControl'] = 'LC',
                ['LeftShift'] = 'LS',
                ['RightAlt'] = 'RAlt',
                ['RightControl'] = 'RC',
                ['RightShift'] = 'RS',
                ['CapsLock'] = 'Caps',
            },
            InputTypes = {
                'MouseButton1',
                'MouseButton2',
                'MouseButton3',
            },

            TransparencyProperties = {
                ['Frame'] = { 'BackgroundTransparency' },
                ['ViewportFrame'] = {
                    'BackgroundTransparency',
                    'ImageTransparency',
                },
                ['ScrollingFrame'] = {
                    'BackgroundTransparency',
                    'ScrollBarImageTransparency',
                },

                ['TextLabel'] = { 'BackgroundTransparency', 'TextTransparency' },
                ['TextButton'] = { 'BackgroundTransparency', 'TextTransparency' },
                ['TextBox'] = { 'BackgroundTransparency', 'TextTransparency' },

                ['ImageLabel'] = { 'BackgroundTransparency', 'ImageTransparency' },
                ['ImageButton'] = { 'BackgroundTransparency', 'ImageTransparency' },

                ['UIStroke'] = { 'Transparency' },
            },
        }


        do
            if Menu.Clear then
                local Children = GetChildren(CoreGui)

                for i = 1, #Children do
                    local Child = Children[i]

                    if Child.Name == BasePath then
                        Destroy(Child)
                    end
                end
            end
        end

        local Theme = Menu.Theme
        local Fonts = Menu.Fonts
        local Images = Menu.Images
        local Connections = Menu.Connections
        local Flags = Menu.Flags
        local EncodedAssets = Menu.EncodedAssets
        local TransparencyProperties = Menu.TransparencyProperties


        do
            function Menu.Draw(Type, Properties, Table)
                local Render = NewInstance(Type)

                if Type == 'Frame' then
                    Render.BorderSizePixel = 1
                    Render.BackgroundTransparency = 0
                    Render.BorderColor3 = NewRGB(0, 0, 0)
                    Render.BackgroundColor3 = NewRGB(0, 0, 0)
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'ViewportFrame' then
                    Render.BorderSizePixel = 1
                    Render.BackgroundTransparency = 0
                    Render.BorderColor3 = NewRGB(0, 0, 0)
                    Render.BackgroundColor3 = NewRGB(0, 0, 0)
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'UIStroke' then
                    Render.LineJoinMode = Enum.LineJoinMode.Miter
                    Render.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
                    Render.Color = NewRGB(0, 0, 0)
                    Render.Transparency = 0
                    Render.Thickness = 1
                elseif Type == 'TextLabel' then
                    Render.BackgroundTransparency = 1
                    Render.TextStrokeTransparency = 1
                    Render.TextTransparency = 0
                    Render.BorderSizePixel = 0
                    Render.Text = 'text'
                    Render.TextStrokeColor3 = NewRGB(0, 0, 0)
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'TextButton' then
                    Render.BorderSizePixel = 1
                    Render.BackgroundTransparency = 0
                    Render.TextStrokeTransparency = 1
                    Render.BorderColor3 = NewRGB(0, 0, 0)
                    Render.BackgroundColor3 = NewRGB(50, 50, 50)
                    Render.TextStrokeColor3 = NewRGB(0, 0, 0)
                    Render.AutoButtonColor = false
                    Render.RichText = true
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'ImageButton' then
                    Render.BorderSizePixel = 1
                    Render.BackgroundTransparency = 0
                    Render.ImageColor3 = NewRGB(255, 255, 255)
                    Render.BorderColor3 = NewRGB(0, 0, 0)
                    Render.BackgroundColor3 = NewRGB(50, 50, 50)
                    Render.ResampleMode = 'Default'
                    Render.AutoButtonColor = false
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'ImageLabel' then
                    Render.BorderSizePixel = 1
                    Render.BackgroundTransparency = 0
                    Render.ImageColor3 = NewRGB(255, 255, 255)
                    Render.BorderColor3 = NewRGB(0, 0, 0)
                    Render.BackgroundColor3 = NewRGB(50, 50, 50)
                    Render.ResampleMode = 'Default'
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'ScrollingFrame' then
                    Render.BorderSizePixel = 1
                    Render.BackgroundTransparency = 1
                    Render.BorderColor3 = NewRGB(0, 0, 0)
                    Render.BackgroundColor3 = NewRGB(0, 0, 0)
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'TextBox' then
                    Render.ClearTextOnFocus = false
                    Render.PlaceholderText = 'Placeholder'
                    Render.TextStrokeColor3 = NewRGB(0, 0, 0)
                    Render.TextStrokeTransparency = 1
                    Render.BorderSizePixel = 1
                    Render.BackgroundTransparency = 1
                    Render.BorderColor3 = NewRGB(0, 0, 0)
                    Render.BackgroundColor3 = NewRGB(0, 0, 0)
                    Render.ZIndex = Menu.CurrentZIndex
                    Render.Visible = true
                elseif Type == 'ScreenGui' then
                    Render.DisplayOrder = 10
                    Render.ZIndexBehavior = Enum.ZIndexBehavior.Global
                elseif Type == 'UIDragDetector' then
                    Render.CursorIcon = 'rbxasset://SystemCursors/Arrow'
                    Render.ActivatedCursorIcon = 'rbxasset://SystemCursors/Arrow'
                end

                if
                    Type ~= 'UIStroke'
                    and Properties['TextStrokeTransparency'] ~= nil
                then
                    Menu.Draw('UIStroke', {
                        Parent = Render,
                        Color = Properties.TextStrokeColor3,
                        LineJoinMode = Properties.LineJoinMode,
                        ApplyStrokeMode = Properties.ApplyStrokeMode,
                        Thickness = Properties.Thickness,
                        Transparency = Properties.TextStrokeTransparency,
                    })
                end

                if StringFind(Lower(Type), 'text') then
                    local Font = Properties.FontFace or Fonts['Verdana Bold']

                    Render['FontFace'] = Font[1]
                    Render['TextSize'] = Font[2]
                    Render['TextColor3'] = Font[3]
                end

                for Index, Value in next, Properties do
                    if Index == 'FontFace' or Index == 'TextStrokeTransparency' then
                        continue
                    end

                    Render[Index] = Value
                end

                if typeof(Table) == 'table' then
                    Table[#Table + 1] = Render
                end

                Menu.CurrentZIndex =Menu.CurrentZIndex+ 1
                Menu.Renders[#Menu.Renders + 1] = Render

                return Render
            end

            function Menu.Remove(Object)
                local Renders = Menu.Renders
                local Descendants = Menu.GetDescendants(Object)

                for i = 1, #Descendants do
                    Remove(Renders, Find(Renders, Descendants[i]))
                end

                Destroy(Object)
            end

            function Menu.GetDescendants(Object)
                return { Object, Unpack(GetDescendants(Object)) }
            end

            function Menu.Tween(
                Object,
                Info,
                Properties
    )
                local Tween = TweenService:Create(Object, Info, Properties)

                Tween:Play()

                return Tween
            end

            function Menu.Error(Message)
                error(Message)
            end

            function Menu.Config(Action, Method)
                if Action == 'New' then
                    return WriteFile(
                        Format('%s/%s.cfg', Menu.Folders.Configs, Method),
                        Menu.Config('Get')
                    )
                elseif Action == 'Get' then
                    local List = {}

                    for Section, Values in next, Flags do
                        if typeof(Values.Get) == 'function' then
                            List[Section] = Values.Get()
                        else
                            List[Section] = {}

                            for Name, Value in next, Values do
                                if
                                    typeof(Value) == 'table'
                                    and typeof(Value.Get) == 'function'
                                then
                                    List[Section][Name] = Value.Get()
                                end
                            end
                        end
                    end

                    return JSONEncode(HttpService, List)
                elseif Action == 'Load' then
                    local Path = Format('%s/%s.cfg', Menu.Folders.Configs, Method)

                    local Config = JSONDecode(
                        HttpService,
                        IsFile(Path) and ReadFile(Path) or Method
                    )

                    for Section, Values in next, Config do
                        local Category = Flags[Section]

                        if Category then
                            if typeof(Category.Set) == 'function' then
                                Category.Set(Values)
                            else
                                for Name, Value in next, Values do
                                    local Flag = Category[Name]

                                    if Flag then
                                        Flag.Set(Value)
                                    end
                                end
                            end
                        end
                    end

                    return Config
                elseif Action == 'Save' then
                    local Path = Format('%s/%s.cfg', Menu.Folders.Configs, Method)

                    if IsFile(Path) then
                        return WriteFile(Path, Menu.Config('Get'))
                    end
                elseif Action == 'Reset' then
                    local Path = Format('%s/%s.cfg', Menu.Folders.Configs, Method)

                    if IsFile(Path) then
                        return WriteFile(Path, '{}')
                    end
                elseif Action == 'Delete' then
                    local Path = Format('%s/%s.cfg', Menu.Folders.Configs, Method)

                    if IsFile(Path) then
                        return DelFile(Path)
                    end
                elseif Action == 'List' then
                    local List = {}
                    local Configs = ListFiles(Menu.Folders.Configs)

                    for i = 1, #Configs do
                        List[#List + 1] = Match(Configs[i], '([^/\\]+)%.cfg$')
                    end

                    return List
                end
            end

            function Menu.Script(Action, Name)
                if Action == 'List' then
                    local List = {}
                    local Scripts = ListFiles(Menu.Folders.Scripts)

                    for i = 1, #Scripts do
                        List[#List + 1] = Match(Scripts[i], '([^/\\]+).lua')
                    end

                    return List
                elseif Action == 'Load' then
                    local Path = Format('%s/%s.lua', Menu.Folders.Scripts, Name)

                    if IsFile(Path) then
                        Menu.Script('Unload', Name)

                        local Module = LoadFile(Path)()
                        Module.Load({ ['Menu'] = Menu })

                        Menu.LoadedScripts[Name] = Module
                    end
                elseif Action == 'Unload' then
                    local Module = Menu.LoadedScripts[Name]

                    if Module then
                        Module.Unload()
                        Module = nil
                    end
                end
            end

            function Menu.Unload(Fade)
                local Library = Menu.Library
                local Windows = Library.Windows

                for i = 1, #Windows do
                    local Window = Windows[i]
                    local Watermark = Window.Watermark

                    if Window then
                        Wrap(function()
                            if
                                Fade
                                and Window.IsVisible
                                and not Window.IsFading
                            then
                                Library:Fade(Window, false)

                                Wait(0.25)
                            end

                            Menu.Remove(Window.Outline)
                            Menu.Remove(Window['Notifcations Holder'])
                        end)()
                    end

                    if Watermark then
                        Wrap(function()
                            if
                                Fade
                                and Watermark.IsVisible
                                and not Watermark.IsFading
                            then
                                Watermark.Fade(false)

                                Wait(0.25)
                            end

                            Menu.Remove(Watermark.Frame)
                        end)()
                    end
                end

                Delay(0.25, function()
                    for i = 1, #Connections do
                        local Connection = Connections[i]

                        if Connection then
                            Connection:Disconnect()
                        end
                    end

                    Clear(Connections)
                    Clear(Menu.Renders)
                end)
            end
        end


        do
            if not IsFolder(BasePath) then
                MakeFolder(BasePath)
            end

            for _, Path in next, Menu.Folders do
                if not IsFolder(Path) then
                    MakeFolder(Path)
                end
            end
        end


        do
            Theme = {
                ['Black'] = NewRGB(0, 0, 0),
                ['White'] = NewRGB(255, 255, 255),

                ['Outline'] = NewRGB(9, 9, 9),
                ['Inline'] = NewRGB(36, 36, 36),

                ['Contrast'] = {
                    ['A'] = NewRGB(23, 23, 23),
                    ['B'] = NewRGB(28, 28, 28),
                },

                ['Text Color'] = {
                    ['A'] = NewRGB(218, 218, 218),
                    ['B'] = NewRGB(122, 122, 122),
                },

                ['Divider'] = NewRGB(55, 55, 55),

                ['Accent'] = NewRGB(196, 246, 255),
            }

            Menu.Theme = Theme
        end


        do
            function Menu.ImportFont(
                Name,
                Data,
                WeightNumber,
                WeightEnum,
                StyleEnum
    )
                WeightNumber = WeightNumber or 400
                WeightEnum = WeightEnum or Enum.FontWeight.Regular
                StyleEnum = StyleEnum or Enum.FontStyle.Normal

                local Path = Menu.Folders.Fonts .. '/'

                local File1Path = Format('%s%s.ttf', Path, Name)
                local File2Path = Format('%s%s.font', Path, Name)

                WriteFile(File1Path, Decode(Data))

                WriteFile(
                    File2Path,
                    JSONEncode(HttpService, {
                        name = Name,
                        faces = {
                            {
                                name = 'Regular',
                                weight = WeightNumber,
                                style = 'normal',
                                assetId = GetCustomAsset(File1Path),
                            },
                        },
                    })
                )

                return NewFont(GetCustomAsset(File2Path), WeightEnum, StyleEnum)
            end

            function Menu.GetTextBounds(Text, FontFace)
                local Params = NewInstance('GetTextBoundsParams')

                Params.Text = Text
                Params.Font = FontFace[1]
                Params.Size = FontFace[2]
                Params.Width = ScreenSize.X
                Params.RichText = true

                local Bounds = TextService:GetTextBoundsAsync(Params)

                Destroy(Params)

                return Bounds
            end

            Fonts = {
                ['Verdana Bold'] = {
                    [1] = Menu.ImportFont(
                        'Verdana Bold',
                        Menu.EncodedAssets['Verdana Bold'],
                        2000,
                        Enum.FontWeight.Bold
                    ),
                    [2] = 12,
                    [3] = NewRGB(218, 218, 218),
                },
            }

            Menu.Fonts = Fonts
        end


        do
            function Menu.ImportImage(Name, Data)
                local ImagePath = Format('%s/%s.png', Menu.Folders.Images, Name)

                WriteFile(ImagePath, Decode(Data))

                return GetCustomAsset(ImagePath)
            end

            for Index, Data in next, EncodedAssets do
                if Fonts[Index] then
                    continue
                end

                Images[Index] = Menu.ImportImage(Index, Data)
            end

            Menu.Images = Images
        end


        do
            Menu['Overlay'] = Menu.Draw(
                'ScreenGui',
                { Parent = CoreGui, Name = BasePath, DisplayOrder = 1 }
            )
            Menu['Overlay2'] = Menu.Draw(
                'ScreenGui',
                { Parent = CoreGui, Name = BasePath, DisplayOrder = 2 }
            )
        end


        do
            local Library = {}
            Library.__index = Library
            local Windows = {}
            Windows.__index = Windows
            local Tabs = {}
            Tabs.__index = Tabs
            local Sections = {}
            Sections.__index = Sections
            local Elements = {}
            Elements.__index = Elements


            do
                Library.Windows = {}
                Library.Colors = {}
                Library.InputBegan = {}
                Library.InputEnded = {}
                Library.InputChanged = {}
                Library.RenderStepped = {}
                Library.PlayerAdded = {}
                Library.PlayerRemoving = {}
            end


            do
                function Library:SetTheme(NewTheme, Indexes, Keys)
                    if NewTheme then
                        Menu.Theme = NewTheme
                        Theme = NewTheme
                    end

                    for Render, Values in next, Library.Colors do
                        if not Render then
                            continue
                        end

                        for i = 1, #Values do
                            local Value = Values[i]

                            local Property = Value[1]
                            local Index = Value[2]
                            local Key = Value[3]

                            local HasKeys = true

                            if Keys then
                                HasKeys = Find(Keys, Key)
                            end

                            if
                                (Indexes == 'All')
                                or (Find(Indexes, Index) and HasKeys)
                            then
                                local Color = Theme[Index]

                                local IsTable = typeof(Color) == 'table'

                                if
                                    IsA(Render, 'UIGradient')
                                    and Property == 'Color'
                                then
                                    if IsTable then
                                        local NewData = {}

                                        for k = 1, #Key do
                                            NewData[#NewData + 1] = Color[Key[k] ]
                                        end

                                        Render[Property] =
                                            NewColorSequence(Unpack(NewData))
                                    else
                                        Render[Property] = NewColorSequence(Color)
                                    end
                                else
                                    if Index == 'Glow Size' then
                                        Color = 1 - (Color / 100)
                                    end

                                    Render[Property] = IsTable and Color[Key]
                                        or Color
                                end
                            end
                        end
                    end
                end

                function Library:Fade(Self, NewVisible)
                    if Self.IsFading then
                        return
                    end

                    if Self.CloseContent then
                        Self:CloseContent({
                            Self.CurrentContent,
                            Self.CurrentColorpicker,
                        })
                    end

                    local Outline = Self.Outline

                    Self.IsFading = true
                    Outline.Visible = true

                    local Descendants = Menu.GetDescendants(Outline)
                    local TweenData = NewTweenInfo(0.25, Enum.EasingStyle.Linear)

                    Sort(Descendants, function(A, B)
                        return (IsA(A, 'GuiObject') and A.ZIndex or 0)
                            > (IsA(B, 'GuiObject') and B.ZIndex or 0)
                    end)

                    for i = 1, #Descendants do
                        Wrap(function()
                            local Descendant = Descendants[i]

                            local Properties =
                                TransparencyProperties[Descendant.ClassName]

                            if Properties then
                                local SelfCache = Self.Cache[Descendant] or {}
                                local TweenProperties = {}

                                for k = 1, #Properties do
                                    local Property = Properties[k]

                                    local Cached = SelfCache[Property]
                                    local Value = Cached or Descendant[Property]

                                    if not Cached then
                                        SelfCache[Property] = Value
                                    end

                                    if Value then
                                        TweenProperties[Property] = NewVisible
                                                and Value
                                            or 1
                                    end
                                end

                                Menu.Tween(Descendant, TweenData, TweenProperties)

                                Self.Cache[Descendant] = SelfCache
                            end
                        end)()
                    end

                    if NewVisible then
                        Clear(Self.Cache)
                    end

                    Delay(0.25, function()
                        Self.IsVisible = NewVisible
                        Self.IsFading = false

                        Outline.Visible = NewVisible
                    end)
                end

                function Library:Window(Parameters)
                    Parameters = Parameters or {}

                    local Size = (
                        typeof(Parameters.Size) == 'Vector2'
                        and NewUDim2(0, Parameters.Size.X, 0, Parameters.Size.Y)
                    )
                        or (typeof(Parameters.Size) == 'UDim2' and Parameters.Size)
                        or NewUDim2(0, 834, 0, 587)
                    local Bind = Parameters.Bind or Enum.KeyCode.RightAlt

                    local Window = {
                        IsFading = false,
                        IsVisible = false,

                        Cache = {},
                        Tabs = {},

                        Connections = {},
                        Keybinds = {},

                        Key = Bind,
                        Library = Library,
                    }


                    do
                        local Outline = Menu.Draw('Frame', {
                            Parent = Menu.Overlay,
                            AnchorPoint = NewVector2(0.5, 0.5),
                            Position = NewUDim2(0.5, 0, 0.5, 0),
                            Size = Size,
                            BackgroundColor3 = Theme.Outline,
                            BorderSizePixel = 0,
                            Visible = Window.IsVisible,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        local Header = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 0),
                            Size = NewUDim2(1, -2, 0, 54),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        Menu.Draw('ImageLabel', {
                            Parent = Header,
                            AnchorPoint = NewVector2(0, 0.42),
                            Position = NewUDim2(0, -30, 0.5, 0),
                            Size = NewUDim2(0, 200, 0, 100),
                            BackgroundTransparency = 1,
                            Image = Images.Archon2,
                            BorderSizePixel = 0,
                        })

                        local Accent = Menu.Draw('Frame', {
                            Parent = Header,
                            Position = NewUDim2(0, 0, 1, 0),
                            Size = NewUDim2(1, 0, 0, 1),
                            BackgroundColor3 = Theme.Accent,
                            BorderSizePixel = 0,
                        })

                        local Footer = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 1, -70),
                            Size = NewUDim2(1, -2, 0, 69),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Accent2 = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 1, -70),
                            Size = NewUDim2(1, -2, 0, 1),
                            BackgroundColor3 = Theme.Accent,
                            BorderSizePixel = 0,
                        })

                        local Background = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 55),
                            Size = NewUDim2(1, -2, 1, -125),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        local Side = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 55),
                            Size = NewUDim2(0, 165, 1, -125),
                            BackgroundColor3 = Theme.Contrast.B,
                            BorderSizePixel = 0,
                        })

                        local Holder = Menu.Draw('Frame', {
                            Parent = Side,
                            Position = NewUDim2(0, 1, 0, 12),
                            Size = NewUDim2(1, -2, 1, -12),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Border1 = Menu.Draw('Frame', {
                            Parent = Side,
                            Position = NewUDim2(1, 0, 0, 0),
                            Size = NewUDim2(0, 1, 1, 0),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        local Border2 = Menu.Draw('Frame', {
                            Parent = Side,
                            Position = NewUDim2(1, 1, 0, 0),
                            Size = NewUDim2(0, 1, 1, 0),
                            BackgroundColor3 = Theme.Outline,
                            BorderSizePixel = 0,
                        })

                        local Shadow = Menu.Draw('Frame', {
                            Parent = Side,
                            Position = NewUDim2(1, 2, 0, 0),
                            Size = NewUDim2(0, 9, 1, 0),
                            BackgroundColor3 = Theme.Black,
                            BorderSizePixel = 0,
                        })

                        local Dragger =
                            Menu.Draw('UIDragDetector', { Parent = Outline })

                        Menu.Draw('UIGradient', {
                            Parent = Shadow,
                            Transparency = NewNumberSequence({
                                NewNumberKeypoint(0, 0.7, 0),
                                NewNumberKeypoint(1, 1, 0),
                            }),
                        })

                        Menu.Draw('UIListLayout', {
                            Parent = Footer,
                            FillDirection = 'Horizontal',
                            HorizontalAlignment = 'Center',
                            VerticalAlignment = 'Center',
                            Padding = NewUDim(0, 0),
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 13) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 13) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Outline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Accent] =
                                { { 'BackgroundColor3', 'Accent' } }
                            Library.Colors[Accent2] =
                                { { 'BackgroundColor3', 'Accent' } }
                            Library.Colors[Background] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                            Library.Colors[Side] =
                                { { 'BackgroundColor3', 'Contrast', 'B' } }
                            Library.Colors[Border1] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Border2] =
                                { { 'BackgroundColor3', 'Outline' } }
                        end

                        Window['Outline'] = Outline
                        Window['Background'] = Background

                        Window['Tabs Holder'] = Footer
                        Window['Category Holder'] = Holder

                        Window['Dragger'] = Dragger
                    end

                    SetMetaTable(Window, Windows)


                    do
                        Library.InputBegan[#Library.InputBegan + 1] = function(
                            Input
                        )
                            if not UserInputService:GetFocusedTextBox() then
                                if
                                    Input.KeyCode == Window.Key
                                    or Input.UserInputType == Window.Key
                                then
                                    Library:Fade(Window, not Window.IsVisible)
                                end
                            end
                        end

                        Connections[#Connections + 1] = Window['Dragger'].DragContinue:Connect(
                            function()
                                local CurrentSection = Window.CurrentSection

                                if CurrentSection then
                                    Window:CloseContent({ CurrentSection })
                                end
                            end
                        )
                    end


                    do
                        Library:Fade(Window, false)
                        Window.Outline.Visible = false

                        Delay(0.25, function()
                            Library:Fade(Window, true)
                        end)
                    end

                    Library.Windows[#Library.Windows + 1] = Window

                    return Window
                end
            end


            do
                function Windows:CloseContent(Content)
                    local Window = self

                    if Content then
                        for i = 1, #Content do
                            local Current = Content[i]

                            if Current then
                                Current.Close()
                            end
                        end
                    else
                        local CurrentContent = Window.CurrentContent

                        if CurrentContent then
                            CurrentContent.Close()

                            Window.CurrentContent = nil
                        end
                    end
                end

                function Windows:Find(Name)
                    local Window = self
                    local Tabs = Window.Tabs

                    for i = 1, #Tabs do
                        local Tab = Tabs[i]

                        if Tab.Name == Name then
                            return Tab, i
                        end
                    end
                end

                function Windows:Tab(Parameters)
                    Parameters = Parameters or {}

                    local Window = self

                    local Name = Parameters.Name or 'Legit'
                    local Icon = Parameters.Icon or Images.Legit
                    local IconSize = Parameters.IconSize or NewUDim2(0, 20, 0, 20)
                    local IconPosition = Parameters.IconPosition
                        or NewUDim2(0.5, 0, 0.5, -9)
                    local Opened = Parameters.Opened or false

                    local LabelPosition = NewUDim2(0.5, 0, 0.5, 12)

                    local Tab = {
                        Sections = {},

                        IsVisible = false,
                        Name = Name,

                        LabelPosition = LabelPosition,
                        IconPosition = IconPosition,

                        Window = Window,
                    }


                    do
                        local Outline = Menu.Draw('Frame', {
                            Parent = Window['Tabs Holder'],
                            BackgroundColor3 = Theme.White,
                            BorderSizePixel = 0,
                            Size = NewUDim2(0, 75, 0, 50),
                            BackgroundTransparency = 1,
                        })

                        local Button = Menu.Draw('TextButton', {
                            Parent = Outline,
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            Text = '',
                            Size = NewUDim2(1, 0, 1, 0),
                            Position = EmptyUDim2,
                        })

                        local Image = Menu.Draw('ImageLabel', {
                            Parent = Outline,
                            AnchorPoint = NewVector2(0.5, 0.5),
                            Size = IconSize,
                            Position = IconPosition,
                            Image = Icon,
                            ImageTransparency = 0.585,
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Label = Menu.Draw('TextLabel', {
                            Parent = Outline,
                            AnchorPoint = NewVector2(0.5, 0.5),
                            Position = NewUDim2(0.5, 0, 0.5, 12),
                            Text = Name,
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            TextColor3 = Theme['Text Color'].B,
                        })

                        local CategoryHolder = Menu.Draw('Frame', {
                            Parent = Window['Category Holder'],
                            Position = EmptyUDim2,
                            Size = NewUDim2(1, 0, 1, 0),
                            BackgroundTransparency = 1,
                            Visible = false,
                        })

                        local SectionsHolder = Menu.Draw('Frame', {
                            Parent = Window.Background,
                            Position = NewUDim2(0, 169, 0, 12),
                            Size = NewUDim2(1, -171, 1, -14),
                            BackgroundTransparency = 1,
                            Visible = false,
                        })

                        local GroupHolder = Menu.Draw('Frame', {
                            Parent = SectionsHolder,
                            Position = EmptyUDim2,
                            Size = NewUDim2(1, -24, 0, 32),
                            BackgroundTransparency = 1,
                        })

                        local Left = Menu.Draw('Frame', {
                            Parent = SectionsHolder,
                            Position = NewUDim2(0, 10, 0, 0),
                            Size = NewUDim2(0.5, -16, 1, -10),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Right = Menu.Draw('Frame', {
                            Parent = SectionsHolder,
                            Position = NewUDim2(0.5, 6, 0, 0),
                            Size = NewUDim2(0.5, -15, 1, -10),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        Menu.Draw('UIListLayout', {
                            Parent = CategoryHolder,
                            FillDirection = 'Vertical',
                            HorizontalAlignment = 'Left',
                            VerticalAlignment = 'Top',
                            Padding = NewUDim(0, 5),
                        })

                        Menu.Draw('UIListLayout', {
                            Parent = Left,
                            Padding = NewUDim(0, 12),
                            FillDirection = 'Vertical',
                            HorizontalAlignment = 'Left',
                            VerticalAlignment = 'Top',
                        })

                        Menu.Draw('UIListLayout', {
                            Parent = Right,
                            Padding = NewUDim(0, 12),
                            FillDirection = 'Vertical',
                            HorizontalAlignment = 'Left',
                            VerticalAlignment = 'Top',
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 10) }
                        )

                        Tab['Frame'] = Outline
                        Tab['Button'] = Button

                        Tab['Image'] = Image
                        Tab['Label'] = Label

                        Tab['Category Holder'] = CategoryHolder
                        Tab['Sections Holder'] = SectionsHolder
                        Tab['Groups Holder'] = GroupHolder

                        Tab['Left'] = Left
                        Tab['Right'] = Right
                    end


                    do
                        local TabFrame = Tab['Frame']
                        local TabButton = Tab['Button']

                        local TabLabel = Tab['Label']
                        local TabImage = Tab['Image']

                        local FinalImage = IconPosition - NewUDim2(0, 0, 0, 3)
                        local FinalLabel = NewUDim2(0.5, 0, 0.5, 9)

                        Connections[#Connections + 1] = TabButton.MouseButton1Down:Connect(
                            function()
                                Tab:Open()
                            end
                        )

                        Connections[#Connections + 1] = TabFrame.MouseEnter:Connect(
                            function()
                                if not Tab.IsVisible then
                                    Menu.Tween(
                                        TabLabel,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        {
                                            TextColor3 = Theme['Text Color'].A,
                                            Position = FinalLabel,
                                        }
                                    )
                                    Menu.Tween(
                                        TabImage,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        {
                                            ImageTransparency = 0.3,
                                            Position = FinalImage,
                                        }
                                    )
                                end
                            end
                        )

                        Connections[#Connections + 1] = TabFrame.MouseLeave:Connect(
                            function()
                                if not Tab.IsVisible then
                                    Menu.Tween(
                                        TabLabel,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        {
                                            TextColor3 = Theme['Text Color'].B,
                                            Position = LabelPosition,
                                        }
                                    )
                                    Menu.Tween(
                                        TabImage,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        {
                                            ImageTransparency = 0.585,
                                            Position = IconPosition,
                                        }
                                    )
                                end
                            end
                        )
                    end

                    SetMetaTable(Tab, Tabs)

                    if Opened then
                        Tab:Open()
                    end

                    Window.Tabs[#Window.Tabs + 1] = Tab

                    return Tab
                end
            end


            do
                function Tabs:Open()
                    local Tab = self
                    local Window = Tab.Window

                    local IsCategory = (Tab.ParentCategory ~= nil)
                    local IsGroup = (Tab.ParentGroup ~= nil)
                    local CurrentTab = Window.CurrentTab

                    if IsCategory then
                        CurrentTab = Tab.ParentCategory.CurrentTab
                    elseif IsGroup then
                        CurrentTab = Tab.ParentGroup.CurrentTab
                    end

                    if CurrentTab == Tab then
                        return
                    end

                    Window:CloseContent({
                        Window.CurrentColorpicker,
                        Window.CurrentContent,
                        Window.CurrentSection,
                    })

                    if CurrentTab then
                        if not IsCategory then
                            Menu.Tween(
                                CurrentTab.Label,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { TextColor3 = Theme['Text Color'].B }
                            )

                            Library.Colors[Tab.Label] = nil

                            if not IsGroup then
                                Menu.Tween(
                                    CurrentTab.Frame,
                                    NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                    { BackgroundTransparency = 1 }
                                )
                                Menu.Tween(
                                    CurrentTab.Image,
                                    NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                    { ImageTransparency = 0.585 }
                                )

                                CurrentTab['Category Holder'].Visible = false
                            end
                        else
                            Menu.Tween(
                                CurrentTab.Accent,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { BackgroundTransparency = 1 }
                            )
                            Menu.Tween(
                                CurrentTab.Shadow,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { BackgroundTransparency = 1 }
                            )
                            Menu.Tween(
                                CurrentTab.Label,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { TextColor3 = Theme['Text Color'].B }
                            )
                        end

                        CurrentTab['Sections Holder'].Visible = false
                        CurrentTab.IsVisible = false
                    end

                    if not IsCategory then
                        if not IsGroup then
                            Menu.Tween(
                                Tab.Frame,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { BackgroundTransparency = 0.96 }
                            )
                            Menu.Tween(
                                Tab.Label,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                {
                                    TextColor3 = Theme['Text Color'].A,
                                    Position = Tab.LabelPosition,
                                }
                            )
                            Menu.Tween(
                                Tab.Image,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                {
                                    ImageTransparency = 0.3,
                                    Position = Tab.IconPosition,
                                }
                            )

                            Tab['Category Holder'].Visible = true

                            Window.CurrentTab = Tab
                        else
                            Menu.Tween(
                                Tab.Label,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { TextColor3 = Theme.Accent }
                            )

                            Library.Colors[Tab.Label] =
                                { { 'TextColor3', 'Accent' } }

                            Tab.ParentGroup.CurrentTab = Tab
                        end
                    else
                        Menu.Tween(
                            Tab.Accent,
                            NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                            { BackgroundTransparency = 0 }
                        )
                        Menu.Tween(
                            Tab.Shadow,
                            NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                            { BackgroundTransparency = 0 }
                        )
                        Menu.Tween(
                            Tab.Label,
                            NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                            { TextColor3 = Theme['Text Color'].A }
                        )

                        Tab.ParentCategory.CurrentTab = Tab
                    end

                    Tab['Sections Holder'].Visible = true

                    Tab.IsVisible = true
                end

                function Tabs:Category(Parameters)
                    local Tab = self
                    local Window = Tab.Window

                    Parameters = Parameters or {}

                    local Name = Parameters.Name or 'Category'
                    local Categories = Parameters.Categories
                        or {
                            { 'Main', 'Gives you superpowers' },
                        }

                    local Category = {
                        Name = Name,
                        Window = Window,

                        Tabs = {},
                    }


                    do
                        for i = 1, #Categories do
                            local Data = Categories[i]

                            local CategoryName = Data[1]
                            local CategoryInfo = Data[2] or ''

                            local HasInfo = (CategoryInfo ~= '')

                            local MCategory = {
                                Name = CategoryName,

                                ParentCategory = Category,
                                Window = Window,

                                Sections = {},

                                IsVisible = false,
                            }


                            do
                                local Frame = Menu.Draw('Frame', {
                                    Parent = Tab['Category Holder'],
                                    Size = NewUDim2(1, 0, 0, 46),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                })

                                local Button = Menu.Draw('TextButton', {
                                    Parent = Frame,
                                    Text = '',
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                    Size = NewUDim2(1, 0, 1, 0),
                                    Position = EmptyUDim2,
                                })

                                local Accent = Menu.Draw('Frame', {
                                    Parent = Frame,
                                    Position = EmptyUDim2,
                                    Size = NewUDim2(0, 2, 1, 0),
                                    BackgroundColor3 = Theme.Accent,
                                    BorderSizePixel = 0,
                                    BackgroundTransparency = 1,
                                })

                                local Shadow = Menu.Draw('Frame', {
                                    Parent = Frame,
                                    Position = NewUDim2(0, 2, 0, 0),
                                    Size = NewUDim2(0.75, 0, 1, 0),
                                    BackgroundColor3 = Theme.White,
                                    BorderSizePixel = 0,
                                    BackgroundTransparency = 1,
                                })

                                local Label = Menu.Draw('TextLabel', {
                                    Parent = Frame,
                                    AnchorPoint = NewVector2(0, 0.5),
                                    Position = NewUDim2(
                                        0,
                                        8,
                                        0.5,
                                        HasInfo and -9 or 0
                                    ),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                    TextColor3 = Theme['Text Color'].B,
                                    TextXAlignment = 'Left',
                                    Text = CategoryName,
                                })

                                if HasInfo then
                                    Menu.Draw('TextLabel', {
                                        Parent = Frame,
                                        AnchorPoint = NewVector2(0, 0.5),
                                        Position = NewUDim2(0, 8, 0.5, 7),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        TextColor3 = Theme['Text Color'].B,
                                        TextXAlignment = 'Left',
                                        Text = CategoryInfo,
                                        TextSize = 10,
                                    })
                                end

                                local SectionsHolder = Menu.Draw('Frame', {
                                    Parent = Tab['Sections Holder'],
                                    Position = EmptyUDim2,
                                    Size = NewUDim2(1, 0, 1, 0),
                                    BackgroundTransparency = 1,
                                    Visible = false,
                                })

                                local GroupHolder = Menu.Draw('Frame', {
                                    Parent = SectionsHolder,
                                    Position = NewUDim2(0, 10, 0, 0),
                                    Size = NewUDim2(1, -20, 0, 32),
                                    BackgroundTransparency = 1,
                                })

                                local Left = Menu.Draw('Frame', {
                                    Parent = SectionsHolder,
                                    Position = NewUDim2(0, 10, 0, 0),
                                    Size = NewUDim2(0.5, -16, 1, -10),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                })

                                local Right = Menu.Draw('Frame', {
                                    Parent = SectionsHolder,
                                    Position = NewUDim2(0.5, 6, 0, 0),
                                    Size = NewUDim2(0.5, -15, 1, -10),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                })

                                Menu.Draw('UIListLayout', {
                                    Parent = Left,
                                    Padding = NewUDim(0, 12),
                                    FillDirection = 'Vertical',
                                    HorizontalAlignment = 'Left',
                                    VerticalAlignment = 'Top',
                                })

                                Menu.Draw('UIListLayout', {
                                    Parent = Right,
                                    Padding = NewUDim(0, 12),
                                    FillDirection = 'Vertical',
                                    HorizontalAlignment = 'Left',
                                    VerticalAlignment = 'Top',
                                })

                                Menu.Draw('UIGradient', {
                                    Parent = Shadow,
                                    Transparency = NewNumberSequence({
                                        NewNumberKeypoint(0, 0.95, 0),
                                        NewNumberKeypoint(1, 1, 0),
                                    }),
                                })


                                do
                                    Library.Colors[Accent] =
                                        { { 'BackgroundColor3', 'Accent' } }
                                end

                                MCategory['Frame'] = Frame
                                MCategory['Button'] = Button
                                MCategory['Label'] = Label

                                MCategory['Accent'] = Accent
                                MCategory['Shadow'] = Shadow

                                MCategory['Sections Holder'] = SectionsHolder
                                MCategory['Groups Holder'] = GroupHolder

                                MCategory['Left'] = Left
                                MCategory['Right'] = Right
                            end

                            SetMetaTable(MCategory, Tabs)


                            do
                                local Button = MCategory['Button']
                                local Label = MCategory['Label']

                                Connections[#Connections + 1] = Button.MouseButton1Down:Connect(
                                    function()
                                        MCategory:Open()
                                    end
                                )

                                Connections[#Connections + 1] = Button.MouseEnter:Connect(
                                    function()
                                        if not MCategory.IsVisible then
                                            TweenService
                                                :Create(
                                                    Label,
                                                    NewTweenInfo(
                                                        0.2,
                                                        Enum.EasingStyle.Linear
                                                    ),
                                                    {
                                                        TextColor3 = Theme['Text Color'].A,
                                                    }
                                                )
                                                :Play()
                                        end
                                    end
                                )

                                Connections[#Connections + 1] = Button.MouseLeave:Connect(
                                    function()
                                        if not MCategory.IsVisible then
                                            TweenService
                                                :Create(
                                                    Label,
                                                    NewTweenInfo(
                                                        0.2,
                                                        Enum.EasingStyle.Linear
                                                    ),
                                                    {
                                                        TextColor3 = Theme['Text Color'].B,
                                                    }
                                                )
                                                :Play()
                                        end
                                    end
                                )
                            end

                            if i == 1 then
                                MCategory:Open()
                            end

                            Category.Tabs[#Category.Tabs + 1] = MCategory
                        end
                    end

                    return Category.Tabs, Category
                end

                function Tabs:Group(Parameters)
                    local Tab = self
                    local Window = Tab.Window

                    Parameters = Parameters or {}

                    local Name = Parameters.Name or 'Category'
                    local Groups = Parameters.Groups
                        or {
                            'Rifles',
                            'Pistols',
                            'SMGs',
                            'Shotguns',
                            'Snipers',
                            'LMGs',
                        }

                    local Amount = #Groups

                    local Group = {
                        Name = Name,

                        Groups = {},
                    }


                    do
                        local Outline = Menu.Draw('Frame', {
                            Parent = Tab['Groups Holder'],
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                            Size = NewUDim2(1, 0, 1, 0),
                            Position = EmptyUDim2,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                            Size = NewUDim2(1, -2, 1, -2),
                            Position = NewUDim2(0, 1, 0, 1),
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 5) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 5) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Group['Frame'] = Inline
                    end


                    do
                        local Scale = 1 / Amount
                        local Inline = Group.Frame

                        for i = 1, Amount do
                            local GroupName = Groups[i]

                            local MGroup = {
                                Name = GroupName,

                                Window = Window,
                                Sections = {},

                                ParentGroup = Group,

                                IsVisible = false,
                            }


                            do
                                local Frame = Menu.Draw('Frame', {
                                    Parent = Inline,
                                    Size = NewUDim2(
                                        Scale,
                                        (i == 1 and -2) or 0,
                                        1,
                                        0
                                    ),
                                    Position = NewUDim2((i - 1) * Scale, 0, 0, 0),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                })

                                if i ~= Amount then
                                    local Divider = Menu.Draw('Frame', {
                                        Parent = Frame,
                                        Size = NewUDim2(0, 1, 1, -14),
                                        Position = NewUDim2(1, 0, 0, 7),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Divider,
                                    })

                                    Library.Colors[Divider] =
                                        { { 'BackgroundColor3', 'Divider' } }
                                end

                                local Button = Menu.Draw('TextButton', {
                                    Parent = Frame,
                                    Text = '',
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                    Size = NewUDim2(1, 0, 1, 0),
                                    Position = EmptyUDim2,
                                })

                                local Label = Menu.Draw('TextLabel', {
                                    Parent = Frame,
                                    AnchorPoint = NewVector2(0.5, 0.5),
                                    Position = NewUDim2(0.5, 0, 0.5, 0),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                    TextColor3 = Theme['Text Color'].B,
                                    Text = GroupName,
                                    TextSize = 13,
                                })

                                local SectionsHolder = Menu.Draw('Frame', {
                                    Parent = Tab['Sections Holder'],
                                    Position = NewUDim2(0, 0, 0, 44),
                                    Size = NewUDim2(1, 0, 1, -44),
                                    BackgroundTransparency = 1,
                                    Visible = false,
                                })

                                local GroupHolder = Menu.Draw('Frame', {
                                    Parent = SectionsHolder,
                                    Position = NewUDim2(0, 10, 0, 0),
                                    Size = NewUDim2(1, -20, 0, 32),
                                    BackgroundTransparency = 1,
                                })

                                local Left = Menu.Draw('Frame', {
                                    Parent = SectionsHolder,
                                    Position = NewUDim2(0, 10, 0, 0),
                                    Size = NewUDim2(0.5, -16, 1, -10),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                })

                                local Right = Menu.Draw('Frame', {
                                    Parent = SectionsHolder,
                                    Position = NewUDim2(0.5, 6, 0, 0),
                                    Size = NewUDim2(0.5, -15, 1, -10),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                })

                                Menu.Draw('UIListLayout', {
                                    Parent = Left,
                                    Padding = NewUDim(0, 12),
                                    FillDirection = 'Vertical',
                                    HorizontalAlignment = 'Left',
                                    VerticalAlignment = 'Top',
                                })

                                Menu.Draw('UIListLayout', {
                                    Parent = Right,
                                    Padding = NewUDim(0, 12),
                                    FillDirection = 'Vertical',
                                    HorizontalAlignment = 'Left',
                                    VerticalAlignment = 'Top',
                                })

                                MGroup['Frame'] = Frame
                                MGroup['Button'] = Button
                                MGroup['Label'] = Label

                                MGroup['Sections Holder'] = SectionsHolder
                                MGroup['Groups Holder'] = GroupHolder

                                MGroup['Left'] = Left
                                MGroup['Right'] = Right
                            end

                            SetMetaTable(MGroup, Tabs)


                            do
                                local Button = MGroup['Button']
                                local Label = MGroup['Label']

                                Connections[#Connections + 1] = Button.MouseButton1Down:Connect(
                                    function()
                                        MGroup:Open()
                                    end
                                )

                                Connections[#Connections + 1] = Button.MouseEnter:Connect(
                                    function()
                                        if not MGroup.IsVisible then
                                            TweenService
                                                :Create(
                                                    Label,
                                                    NewTweenInfo(
                                                        0.2,
                                                        Enum.EasingStyle.Linear
                                                    ),
                                                    {
                                                        TextColor3 = Theme['Text Color'].A,
                                                    }
                                                )
                                                :Play()
                                        end
                                    end
                                )

                                Connections[#Connections + 1] = Button.MouseLeave:Connect(
                                    function()
                                        if not MGroup.IsVisible then
                                            TweenService
                                                :Create(
                                                    Label,
                                                    NewTweenInfo(
                                                        0.2,
                                                        Enum.EasingStyle.Linear
                                                    ),
                                                    {
                                                        TextColor3 = Theme['Text Color'].B,
                                                    }
                                                )
                                                :Play()
                                        end
                                    end
                                )
                            end

                            if i == 1 then
                                MGroup:Open()
                            end

                            Group.Groups[#Group.Groups + 1] = MGroup
                        end
                    end

                    return Group.Groups, Group
                end

                function Tabs:Section(Parameters)
                    local Tab = self

                    Parameters = Parameters or {}

                    local Name = Parameters.Name or 'Weapon Configuration'
                    local Side = Parameters.Side or 'Left'
                    local Size = Parameters.Size or 122
                    local Fill = Parameters.Fill or false

                    local Section = {
                        Name = Name,
                        Offset = 13,

                        Window = Tab.Window,
                    }


                    do
                        local Outline = Menu.Draw('Frame', {
                            Parent = Tab[Side],
                            Size = NewUDim2(
                                1,
                                -2,
                                Fill and 1 or 0,
                                Fill and 0 or Size
                            ),
                            BackgroundColor3 = Theme.Outline,
                            BorderSizePixel = 0,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        Menu.Draw('ImageLabel', {
                            Parent = Outline,
                            Position = NewUDim2(0, -14, 0, -20),
                            Size = NewUDim2(1, 28, 1, 40),
                            BackgroundTransparency = 1,
                            ScaleType = 'Slice',
                            SliceCenter = NewRect(
                                NewVector2(21, 21),
                                NewVector2(79, 79)
                            ),
                            ImageColor3 = Theme.Black,
                            Image = 'http://www.roblox.com/asset/?id=18245826428',
                            ImageTransparency = 0.79,
                            ZIndex = Outline.ZIndex - 1,
                        })

                        local Accent = Menu.Draw('Frame', {
                            Parent = Inline,
                            Position = NewUDim2(0, 0, 0, 27),
                            Size = NewUDim2(1, 0, 0, 1),
                            BackgroundColor3 = Theme.Accent,
                            BorderSizePixel = 0,
                        })

                        local Background = Menu.Draw('Frame', {
                            Parent = Inline,
                            Position = NewUDim2(0, 1, 0, 28),
                            Size = NewUDim2(1, -2, 1, -29),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        local Header = Menu.Draw('Frame', {
                            Parent = Inline,
                            Position = NewUDim2(0, 1, 0, 28),
                            Size = NewUDim2(1, -2, 0, 8),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        Menu.Draw('TextLabel', {
                            Parent = Inline,
                            Text = Name,
                            TextXAlignment = 'Left',
                            Position = NewUDim2(0, 8, 0, 13),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 10) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 10) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Background, CornerRadius = NewUDim(0, 10) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Outline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Accent] =
                                { { 'BackgroundColor3', 'Accent' } }
                            Library.Colors[Background] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                            Library.Colors[Header] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Section['Outline'] = Outline
                        Section['Frame'] = Background
                    end

                    SetMetaTable(Section, Sections)

                    Tab.Sections[#Tab.Sections + 1] = Section

                    return Section
                end
            end


            do
                function Sections:Toggle(Parameters)
                    Parameters = Parameters or {}

                    local Section = self

                    local Name = Parameters.Name or 'Override General Config'
                    local Default = Parameters.Default or false
                    local Unsafe = Parameters.Unsafe or false
                    local Callback = Parameters.Callback or EmptyFunction
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local Toggle = {
                        Value = Default,

                        Colorpickers = {},

                        Section = Section,
                        Offset = Section.Offset,
                    }


                    do
                        local Frame = Menu.Draw('Frame', {
                            Parent = Section.Frame,
                            Position = NewUDim2(0, 0, 0, Section.Offset),
                            Size = NewUDim2(1, 0, 0, 13),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Outline = Menu.Draw('Frame', {
                            Parent = Frame,
                            Position = NewUDim2(0, 10, 0, 0),
                            Size = NewUDim2(0, 16, 0, 16),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Theme.Inline,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Theme.Contrast.A,
                        })

                        local Overlay = Menu.Draw('ImageLabel', {
                            Parent = Frame,
                            Position = NewUDim2(0, 11, 0, 0),
                            Size = NewUDim2(0, 16, 0, 16),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Theme.Accent,
                            Image = Images['Gradient 7'],
                            ImageTransparency = 0.3,
                            Visible = false,
                        })

                        local Image = Menu.Draw('ImageLabel', {
                            Parent = Overlay,
                            AnchorPoint = NewVector2(0.5, 0.5),
                            Position = NewUDim2(0.5, 0, 0.5, 0),
                            Size = NewUDim2(0, 12, 0, 9),
                            BorderSizePixel = 0,
                            BackgroundTransparency = 1,
                            Image = Images['Checkmark 3'],
                            ImageColor3 = Theme.Contrast.A,
                        })

                        local Button = Menu.Draw('TextButton', {
                            Parent = Frame,
                            Position = NewUDim2(0, -1, 0, -1),
                            Size = NewUDim2(1, 3, 1, 2),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            Text = '',
                        })

                        local Label = Menu.Draw('TextLabel', {
                            Parent = Frame,
                            Position = NewUDim2(0, 32, 0, 7),
                            TextColor3 = Unsafe and Theme.Unsafe
                                or Theme['Text Color'].B,
                            BackgroundTransparency = 1,
                            TextXAlignment = 'Left',
                            Text = Name,
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 4) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 4) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Overlay, CornerRadius = NewUDim(0, 4) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                            Library.Colors[Overlay] =
                                { { 'BackgroundColor3', 'Accent' } }
                            Library.Colors[Image] =
                                { { 'ImageColor3', 'Contrast', 'A' } }
                        end

                        Toggle['Frame'] = Frame

                        Toggle['Inline'] = Inline
                        Toggle['Overlay'] = Overlay

                        Toggle['Button'] = Button
                        Toggle['Label'] = Label
                    end


                    do
                        function Toggle.Get()
                            return Toggle.Value
                        end

                        function Toggle.Set(Boolean)
                            if
                                Toggle.Bind
                                and Toggle.Bind.Mode == 'Always'
                                and Boolean == false
                            then
                                return
                            end

                            Toggle.Value = Boolean

                            Toggle.Overlay.Visible = Boolean

                            if not Unsafe then
                                Toggle.Label.TextColor3 =
                                    Theme['Text Color'][Boolean and 'A' or 'B']
                            end

                            Callback(Boolean)
                        end
                    end


                    do
                        local ToggleFrame = Toggle['Frame']
                        local ToggleButton = Toggle['Button']
                        local ToggleLabel = Toggle['Label']

                        Connections[#Connections + 1] = ToggleButton.MouseButton1Down:Connect(
                            function()
                                Toggle.Set(not Toggle.Value)
                            end
                        )

                        Connections[#Connections + 1] = ToggleFrame.MouseEnter:Connect(
                            function()
                                if not Toggle.Value then
                                    Menu.Tween(
                                        ToggleLabel,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        { TextColor3 = Theme['Text Color'].A }
                                    )
                                end
                            end
                        )

                        Connections[#Connections + 1] = ToggleFrame.MouseLeave:Connect(
                            function()
                                if not Toggle.Value then
                                    Menu.Tween(
                                        ToggleLabel,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        { TextColor3 = Theme['Text Color'].B }
                                    )
                                end
                            end
                        )
                    end

                    Toggle.Set(Default)

                    SetMetaTable(Toggle, Elements)

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = Toggle
                            else
                                Flags[Category] = {
                                    [Flag] = Toggle,
                                }
                            end
                        else
                            Flags[Flag] = Toggle
                        end
                    end

                    Section.Offset =Section.Offset+ 24

                    return Toggle
                end

                function Sections:Dropdown(Parameters)
                    Parameters = Parameters or {}

                    local Section = self
                    local Window = Section.Window

                    local Name = Parameters.Name or ''
                    local Options = Parameters.Options
                        or {
                            'General',
                            'Health Bar',
                            'Health Value',
                            'Tool',
                            'Distance',
                        }
                    local Default = Parameters.Default
                    local Min = Parameters.Min or 1
                    local MultiChoice = typeof(Default) == 'table'
                    local Unsafe = Parameters.Unsafe or false
                    local Callback = Parameters.Callback or EmptyFunction
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local IsNamed = (Name ~= '')

                    local Dropdown = {
                        Values = {},
                        IsOpen = false,

                        Value = Default,
                        Options = Options,
                        MultiChoice = MultiChoice,

                        Section = Section,
                        Offset = Section.Offset,
                    }


                    do
                        local Frame = Menu.Draw('Frame', {
                            Parent = Section.Frame,
                            Position = NewUDim2(0, 0, 0, Section.Offset),
                            Size = NewUDim2(1, 0, 0, 13),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Outline = Menu.Draw('Frame', {
                            Parent = Frame,
                            Position = NewUDim2(0, 10, 0, IsNamed and 15 or 0),
                            Size = NewUDim2(1, -20, 0, 26),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        local Button = Menu.Draw('TextButton', {
                            Parent = Outline,
                            Size = NewUDim2(1, 0, 1, 0),
                            Position = EmptyUDim2,
                            BackgroundTransparency = 1,
                            Text = '',
                        })

                        local Label = Menu.Draw('TextLabel', {
                            Parent = Inline,
                            AnchorPoint = NewVector2(0, 0.5),
                            Position = NewUDim2(0, 5, 0.5, -1),
                            Size = NewUDim2(1, -25, 1, -4),
                            TextTruncate = 'AtEnd',
                            TextXAlignment = 'Left',
                            Text = 'None selected...',
                            TextColor3 = Theme['Text Color'].B,
                        })

                        Menu.Draw('ImageLabel', {
                            Parent = Inline,
                            AnchorPoint = NewVector2(0, 0.5),
                            Position = NewUDim2(1, -18, 0.5, 0),
                            Size = NewUDim2(0, 9, 0, 6),
                            Image = Images['Down Arrow 2'],
                            BorderSizePixel = 0,
                            BackgroundTransparency = 1,
                        })

                        Menu.Draw('TextLabel', {
                            Parent = Frame,
                            Position = NewUDim2(0, 10, 0, 5),
                            Text = Name,
                            TextXAlignment = 'Left',
                            TextColor3 = Unsafe and Theme.Unsafe
                                or Theme['Text Color'].A,
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 5) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 5) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Dropdown['Frame'] = Frame
                        Dropdown['Outer'] = Outline

                        Dropdown['Button'] = Button
                        Dropdown['Label'] = Label
                    end


                    do
                        function Dropdown.Get()
                            return Dropdown.Value
                        end

                        function Dropdown.Set(Value)
                            if typeof(Value) == 'table' then
                                for i = #Value, 1, -1 do
                                    if not Find(Dropdown.Options, Value[i]) then
                                        Remove(Value, i)
                                    end
                                end

                                Dropdown.Value = MultiChoice and Value or Value[1]
                            elseif not Find(Dropdown.Options, Value) then
                                return
                            end

                            Dropdown.Update()

                            Callback(Value)
                        end

                        function Dropdown.Update()
                            Dropdown.Label.Text = MultiChoice
                                    and (#Dropdown.Value > 0 and Concat(
                                        Dropdown.Value,
                                        ', '
                                    ) or 'None selected...')
                                or (Dropdown.Value and Dropdown.Value)
                                or 'None selected...'
                        end

                        function Dropdown.Refresh(Value)
                            local DropdownValue = Dropdown.Value
                            local DropdownValues = Dropdown.Values
                            local DropdownOptions = Dropdown.Options

                            if MultiChoice then
                                local Amount = #DropdownValue
                                local Found = Find(DropdownValue, Value)

                                if Found then
                                    if Amount > Min then
                                        Remove(Dropdown.Value, Found)
                                    end
                                else
                                    Dropdown.Value[Amount + 1] = Value
                                end
                            else
                                if DropdownValue == Value then
                                    if Min < 1 then
                                        Dropdown.Value = nil
                                    end
                                else
                                    Dropdown.Value = Value
                                end
                            end

                            DropdownValue = Dropdown.Value

                            for i = 1, #DropdownOptions do
                                local Option = Dropdown.Options[i]
                                local Frame = DropdownValues[i]

                                local IsValue = (
                                    MultiChoice and Find(DropdownValue, Option)
                                )
                                    or (DropdownValue == Option)

                                Frame.TextColor3 =
                                    Theme['Text Color'][IsValue and 'A' or 'B']
                            end

                            Dropdown.Update()

                            Callback(DropdownValue)
                        end

                        function Dropdown.Open()
                            if Dropdown.IsOpen then
                                Dropdown.Close()
                                return
                            end

                            Window:CloseContent()
                            Window.CurrentContent = Dropdown

                            Dropdown.IsOpen = true


                            do
                                local Outline = Menu.Draw('Frame', {
                                    Parent = Dropdown.Outer,
                                    Position = NewUDim2(0, 0, 1, 2),
                                    Size = NewUDim2(1, 1, 0, 0),
                                    BackgroundColor3 = Theme.Inline,
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                })

                                local Inline = Menu.Draw('Frame', {
                                    Parent = Outline,
                                    Position = NewUDim2(0, 1, 0, 1),
                                    Size = NewUDim2(1, -2, 1, -2),
                                    BackgroundColor3 = Theme.Contrast.A,
                                    BorderSizePixel = 0,
                                    ClipsDescendants = true,
                                })

                                Menu.Draw('UIListLayout', {
                                    Parent = Inline,
                                    Padding = NewUDim(0, 1),
                                    FillDirection = 'Vertical',
                                    VerticalFlex = 'Fill',
                                    ItemLineAlignment = 'Center',
                                })

                                Menu.Draw('UICorner', {
                                    Parent = Outline,
                                    CornerRadius = NewUDim(0, 5),
                                })
                                Menu.Draw('UICorner', {
                                    Parent = Inline,
                                    CornerRadius = NewUDim(0, 5),
                                })


                                do
                                    Library.Colors[Outline] =
                                        { { 'BackgroundColor3', 'Inline' } }
                                    Library.Colors[Inline] =
                                        { { 'BackgroundColor3', 'Contrast', 'A' } }
                                end

                                Dropdown['Outline'] = Outline
                                Dropdown['Inline'] = Inline
                            end


                            do
                                local Outline = Dropdown.Outline
                                local Inline = Dropdown.Inline

                                Connections[#Connections + 1] = Outline
                                    :GetPropertyChangedSignal(
                                        'BackgroundTransparency'
                                    )
                                    :Connect(function()
                                        Inline.BackgroundTransparency =
                                            Outline.BackgroundTransparency
                                    end)
                            end


                            do
                                local Inline = Dropdown.Inline
                                local DropdownOptions = Dropdown.Options

                                for i = 1, #DropdownOptions do
                                    local Option = DropdownOptions[i]

                                    local IsValue = (
                                        MultiChoice
                                        and Find(Dropdown.Value, Option)
                                    )
                                        or (Dropdown.Value == Option)

                                    local Button = Menu.Draw('TextButton', {
                                        Parent = Inline,
                                        ZIndex = Inline.ZIndex + 1,
                                        Position = EmptyUDim2,
                                        Size = NewUDim2(1, 0, 0, 0),
                                        BorderSizePixel = 0,
                                        Text = '',
                                        BackgroundTransparency = 1,
                                        AutomaticSize = 'Y',
                                    })

                                    local Value = Menu.Draw('TextLabel', {
                                        Parent = Button,
                                        ZIndex = Button.ZIndex + 1,
                                        AnchorPoint = NewVector2(0, 0.5),
                                        Position = NewUDim2(0, 5, 0.5, 0),
                                        Size = NewUDim2(1, -25, 1, 0),
                                        TextTruncate = 'AtEnd',
                                        TextXAlignment = 'Left',
                                        Text = Option,
                                        BackgroundTransparency = 1,
                                        TextTransparency = 1,
                                        TextColor3 = Theme['Text Color'][IsValue and 'A' or 'B'],
                                    })


                                    do
                                        Connections[#Connections + 1] = Button.MouseButton1Down:Connect(
                                            function()
                                                Dropdown.Refresh(Option)
                                            end
                                        )

                                        Connections[#Connections + 1] = Button.MouseEnter:Connect(
                                            function()
                                                local IsValue = (
                                                    MultiChoice
                                                    and Find(Dropdown.Value, Option)
                                                )
                                                    or (Dropdown.Value == Option)

                                                if not IsValue then
                                                    Menu.Tween(
                                                        Value,
                                                        NewTweenInfo(
                                                            0.15,
                                                            Enum.EasingStyle.Linear
                                                        ),
                                                        {
                                                            TextColor3 = Theme['Text Color'].A,
                                                        }
                                                    )
                                                end
                                            end
                                        )

                                        Connections[#Connections + 1] = Button.MouseLeave:Connect(
                                            function()
                                                local IsValue = (
                                                    MultiChoice
                                                    and Find(Dropdown.Value, Option)
                                                )
                                                    or (Dropdown.Value == Option)

                                                if not IsValue then
                                                    Menu.Tween(
                                                        Value,
                                                        NewTweenInfo(
                                                            0.15,
                                                            Enum.EasingStyle.Linear
                                                        ),
                                                        {
                                                            TextColor3 = Theme['Text Color'].B,
                                                        }
                                                    )
                                                end
                                            end
                                        )
                                    end

                                    Dropdown.Values[#Dropdown.Values + 1] = Value
                                end
                            end


                            do
                                local Descendants =
                                    Menu.GetDescendants(Dropdown.Outline)

                                for i = 1, #Descendants do
                                    local Descendant = Descendants[i]

                                    if
                                        IsA(Descendant, 'UIGradient')
                                        or IsA(Descendant, 'TextButton')
                                        or IsA(Descendant, 'UIListLayout')
                                        or IsA(Descendant, 'UICorner')
                                        or Descendant == Dropdown.Inline
                                    then
                                        continue
                                    end

                                    local Properties =
                                        { BackgroundTransparency = 0 }

                                    if IsA(Descendant, 'TextLabel') then
                                        Properties = { TextTransparency = 0 }
                                    elseif Descendant == Dropdown.Outline then
                                        Properties['Size'] = NewUDim2(
                                            0,
                                            Descendant.AbsoluteSize.X,
                                            0,
                                            (18 * #Dropdown.Options)
                                        )
                                    elseif IsA(Descendant, 'UIStroke') then
                                        Properties = { Transparency = 0 }
                                    end

                                    Menu.Tween(
                                        Descendant,
                                        NewTweenInfo(0.08, Enum.EasingStyle.Linear),
                                        Properties
                                    )
                                end
                            end

                            Dropdown.OpenFrame = Dropdown.Outline
                        end

                        function Dropdown.Close()
                            if not Dropdown.IsOpen then
                                return
                            end

                            Window.CurrentContent = nil
                            Dropdown.IsOpen = false


                            do
                                local Descendants =
                                    Menu.GetDescendants(Dropdown.Outline)

                                for i = 1, #Descendants do
                                    local Descendant = Descendants[i]

                                    if
                                        IsA(Descendant, 'UIGradient')
                                        or IsA(Descendant, 'TextButton')
                                        or IsA(Descendant, 'UIListLayout')
                                        or IsA(Descendant, 'UICorner')
                                        or Descendant == Dropdown.Inline
                                    then
                                        continue
                                    end

                                    local Properties =
                                        { BackgroundTransparency = 1 }

                                    if IsA(Descendant, 'TextLabel') then
                                        Properties = { TextTransparency = 1 }
                                    elseif IsA(Descendant, 'UIStroke') then
                                        Properties = { Transparency = 1 }
                                    elseif Descendant == Dropdown.Outline then
                                        Properties['Size'] = NewUDim2(
                                            0,
                                            Descendant.AbsoluteSize.X,
                                            0,
                                            0
                                        )
                                    end

                                    Menu.Tween(
                                        Descendant,
                                        NewTweenInfo(0.08, Enum.EasingStyle.Linear),
                                        Properties
                                    )
                                end
                            end

                            Delay(0.08, function()
                                Clear(Dropdown.Values)

                                Menu.Remove(Dropdown.OpenFrame)
                            end)
                        end
                    end

                    Dropdown.Update()


                    do
                        local DropdownButton = Dropdown['Button']

                        Connections[#Connections + 1] =
                            DropdownButton.MouseButton1Down:Connect(Dropdown.Open)
                    end

                    SetMetaTable(Dropdown, Elements)

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = Dropdown
                            else
                                Flags[Category] = {
                                    [Flag] = Dropdown,
                                }
                            end
                        else
                            Flags[Flag] = Dropdown
                        end
                    end

                    Section.Offset =Section.Offset+ (IsNamed and 49 or 34)

                    return Dropdown
                end

                function Sections:Slider(Parameters)
                    Parameters = Parameters or {}

                    local Section = self

                    local Name = Parameters.Name or ''
                    local Min = Parameters.Min or 0
                    local Max = Parameters.Max or 100
                    local Default = Parameters.Default or 50
                    local Prefix = Parameters.Prefix or ''
                    local Decimals = Parameters.Decimals or 1
                    local Callback = Parameters.Callback or EmptyFunction
                    local Specials = Parameters.Specials or false
                    local Unsafe = Parameters.Unsafe or false
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local IsNamed = (Name ~= '')

                    local Cut = Split(Decimals, '.')[2]
                    local DecimalSuffix = Cut and #Cut or 0

                    Default = Clamp(Default, Min, Max)
                    Decimals = 1 / Decimals

                    local Slider = {
                        Decimals = Decimals,

                        Prefix = Prefix,
                        Value = 0,

                        Min = Min,
                        Max = Max,

                        Section = Section,
                        Offset = Section.Offset,
                    }


                    do
                        local Frame = Menu.Draw('Frame', {
                            Parent = Section.Frame,
                            Position = NewUDim2(0, 0, 0, Section.Offset),
                            Size = NewUDim2(1, 0, 0, 13),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Outline = Menu.Draw('Frame', {
                            Parent = Frame,
                            Position = NewUDim2(0, 10, 0, 19),
                            Size = NewUDim2(1, -20, 0, 12),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Theme.Inline,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Theme.Contrast.A,
                        })

                        local Button = Menu.Draw('ImageButton', {
                            Parent = Inline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Button2 = Menu.Draw('ImageButton', {
                            Parent = Button,
                            Position = EmptyUDim2,
                            Size = NewUDim2(
                                (Slider.Value - Slider.Min)
                                    / (Slider.Max - Slider.Min),
                                0,
                                1,
                                0
                            ),
                            BackgroundColor3 = Theme.Accent,
                            BorderSizePixel = 0,
                            Interactable = false,
                            Image = Images.Gradient,
                            ImageTransparency = 0.3,
                        })

                        local BoxOutline = Menu.Draw('Frame', {
                            Parent = Frame,
                            Position = NewUDim2(
                                0,
                                IsNamed
                                        and 16 + Menu.GetTextBounds(
                                            Name,
                                            Fonts['Verdana Bold']
                                        ).X
                                    or 11,
                                0,
                                -1
                            ),
                            Size = NewUDim2(0, 36, 0, 17),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Theme.Inline,
                        })

                        local BoxInline = Menu.Draw('Frame', {
                            Parent = BoxOutline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = Theme.Contrast.A,
                        })

                        local TextBox = Menu.Draw('TextBox', {
                            Parent = BoxInline,
                            Position = NewUDim2(0, 0, 0, 0),
                            Size = NewUDim2(1, 0, 1, -1),
                            BorderSizePixel = 0,
                            BackgroundTransparency = 1,
                            TextColor3 = Theme['Text Color'].B,
                            TextSize = 11,
                            PlaceholderText = '',
                            ClipsDescendants = true,
                        })

                        local DraggerOutline = Menu.Draw('Frame', {
                            Parent = Button2,
                            AnchorPoint = NewVector2(0, 0.5),
                            Position = NewUDim2(1, -2, 0.5, 0),
                            Size = NewUDim2(0, 6, 0, 12),
                            BorderSizePixel = 0,
                            BackgroundColor3 = NewRGB(111, 109, 109),
                        })

                        local DraggerInline = Menu.Draw('Frame', {
                            Parent = DraggerOutline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BorderSizePixel = 0,
                            BackgroundColor3 = NewRGB(161, 161, 161),
                        })

                        Menu.Draw('TextLabel', {
                            Parent = Frame,
                            Position = NewUDim2(0, 11, 0, 7),
                            Text = Name,
                            TextXAlignment = 'Left',
                            TextColor3 = Unsafe and Theme.Unsafe
                                or Theme['Text Color'].A,
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 5) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 5) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Button2, CornerRadius = NewUDim(0, 5) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = BoxOutline, CornerRadius = NewUDim(0, 6) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = BoxInline, CornerRadius = NewUDim(0, 6) }
                        )
                        Menu.Draw('UICorner', {
                            Parent = DraggerOutline,
                            CornerRadius = NewUDim(0, 5),
                        })
                        Menu.Draw(
                            'UICorner',
                            { Parent = DraggerInline, CornerRadius = NewUDim(0, 5) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                            Library.Colors[Button2] =
                                { { 'BackgroundColor3', 'Accent' } }
                            Library.Colors[BoxOutline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[BoxInline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Slider['Frame'] = Frame
                        Slider['Outline'] = Outline

                        Slider['Button'] = Button
                        Slider['Button2'] = Button2

                        Slider['Label'] = TextBox
                        Slider['Box'] = BoxOutline
                    end


                    do
                        local Button = Slider['Button2']
                        local Label = Slider['Label']
                        local Box = Slider['Box']

                        function Slider.Get()
                            return Slider.Value
                        end

                        function Slider.Set(Value)
                            Slider.Value = Clamp(
                                Round(Value * Slider.Decimals) / Slider.Decimals,
                                Slider.Min,
                                Slider.Max
                            )

                            local NewValue = Slider.Value

                            local Special = false

                            if Specials and NewValue == Specials[2] then
                                Special = Specials[1]
                            end

                            local NewText = Special
                                or Format(string.format('%%.%sf%%s', tostring(DecimalSuffix)), NewValue, Prefix)

                            Menu.Tween(
                                Button,
                                NewTweenInfo(0.1, Enum.EasingStyle.Linear),
                                {
                                    Size = NewUDim2(
                                        (
                                            (NewValue - Slider.Min)
                                            / (Slider.Max - Slider.Min)
                                        ),
                                        0,
                                        1,
                                        0
                                    ),
                                }
                            )

                            Label.Text = NewText

                            Box.Size = NewUDim2(
                                0,
                                Menu.GetTextBounds(NewText, Fonts['Verdana Bold']).X
                                    + 9,
                                0,
                                17
                            )

                            Callback(Slider.Value)
                        end

                        function Slider.Refresh()
                            local AbsoluteX = Slider.Button.AbsoluteSize.X

                            local SliderMin = Slider.Min
                            local SliderMax = Slider.Max

                            Slider.Set(
                                Clamp(
                                    SliderMin
                                        + (SliderMax - SliderMin)
                                            * (Clamp(
                                                Mouse.X - Button.AbsolutePosition.X,
                                                0,
                                                AbsoluteX
                                            ) / AbsoluteX),
                                    SliderMin,
                                    SliderMax
                                )
                            )

                            RenderStepped:Wait()
                        end
                    end

                    Slider.Set(Default)


                    do
                        local SliderButton = Slider['Button']
                        local SliderBox = Slider['Label']

                        local MouseDown = false

                        Connections[#Connections + 1] = SliderButton.MouseButton1Down:Connect(
                            function()
                                Slider.Refresh()

                                MouseDown = true
                            end
                        )

                        Connections[#Connections + 1] = SliderBox.FocusLost:Connect(
                            function(Submited)
                                if not Submited then
                                    SliderBox.Text = Slider.Value
                                end

                                local String = SliderBox.Text
                                local Number = String == '' and 0
                                    or tonumber(String)

                                Slider.Set(Number or Slider.Value)
                            end
                        )

                        Library.InputEnded[#Library.InputEnded + 1] = function(
                            Input
                        )
                            if
                                Input.UserInputType
                                    == Enum.UserInputType.MouseButton1
                                and MouseDown
                            then
                                MouseDown = false

                                Slider.Refresh()
                            end
                        end

                        Library.InputChanged[#Library.InputChanged + 1] = function(
                            Input
                        )
                            if
                                Input.UserInputType
                                    == Enum.UserInputType.MouseMovement
                                and MouseDown
                            then
                                Slider.Refresh()
                            end
                        end
                    end

                    SetMetaTable(Slider, Elements)

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = Slider
                            else
                                Flags[Category] = {
                                    [Flag] = Slider,
                                }
                            end
                        else
                            Flags[Flag] = Slider
                        end
                    end

                    Section.Offset =Section.Offset+ 40

                    return Slider
                end

                function Sections:Button(Parameters)
                    Parameters = Parameters or {}

                    local Section = self

                    local Name = Parameters.Name or 'Load'
                    local Confirm = Parameters.Confirm or false
                    local PassedCallback = Parameters.Callback or EmptyFunction
                    local CallbackText = Parameters.CallbackText
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local Button = {
                        Confirmable = false,

                        Section = Section,
                        Offset = Section.Offset,
                    }

                    local Callback = function(...)
                        if typeof(CallbackText) == 'string' then
                            Button.Button.Text = CallbackText
                        end

                        Button.Button.TextColor3 = Theme['Text Color'].A

                        Delay(0.25, function()
                            Button.Button.Text = Name

                            Button.Button.TextColor3 = Theme['Text Color'].B
                        end)

                        PassedCallback(...)
                    end


                    do
                        local Frame = Menu.Draw('Frame', {
                            Parent = Section.Frame,
                            Position = NewUDim2(0, 0, 0, Section.Offset),
                            Size = NewUDim2(1, 0, 0, 13),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Outline = Menu.Draw('Frame', {
                            Parent = Frame,
                            Position = NewUDim2(0, 10, 0, 0),
                            Size = NewUDim2(1, -20, 0, 26),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        local TextButton = Menu.Draw('TextButton', {
                            Parent = Outline,
                            Size = NewUDim2(1, 0, 1, -1),
                            Position = EmptyUDim2,
                            BackgroundTransparency = 1,
                            Text = Name,
                            TextColor3 = Theme['Text Color'].B,
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 5) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 5) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Button['Frame'] = Outline
                        Button['Button'] = TextButton
                    end


                    do
                        function Button.Set() end
                        function Button.Get() end

                        function Button.Activate()
                            if Confirm then
                                if Button.Confirmable then
                                    Callback()

                                    Cancel(Button.Task)

                                    Button.Confirmable = false
                                    Button.Button.TextColor3 = Theme['Text Color'].B
                                    Button.Button.Text = Name
                                else
                                    Button.Task = Spawn(function()
                                        for i = 3.00, 0, -0.1 do
                                            Button.Button.Text =
                                                Format('Confirm? [%.1f]', i)
                                            Button.Button.TextColor3 =
                                                Theme['Text Color'].A

                                            Button.Confirmable = true
                                            Wait(0.1)
                                        end

                                        Button.Confirmable = false
                                        Button.Button.TextColor3 =
                                            Theme['Text Color'].B
                                        Button.Button.Text = Name
                                    end)
                                end
                            else
                                Callback()
                            end
                        end
                    end


                    do
                        Connections[#Connections + 1] =
                            Button['Button'].MouseButton1Down:Connect(
                                Button.Activate
                            )
                    end

                    SetMetaTable(Button, Elements)

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = Button
                            else
                                Flags[Category] = {
                                    [Flag] = Button,
                                }
                            end
                        else
                            Flags[Flag] = Button
                        end
                    end

                    Section.Offset =Section.Offset+ 34

                    return Button
                end

                function Sections:TextBox(Parameters)
                    Parameters = Parameters or {}

                    local Section = self

                    local PlaceholderText = Parameters.Placeholder
                        or 'Enter Text...'
                    local Default = (Parameters.Default and Parameters.Default)
                        or (Parameters.Placeholder and PlaceholderText)
                        or ''
                    local ResetText = Parameters.ResetText or Default
                    local Callback = Parameters.Callback or EmptyFunction
                    local ClearText = Parameters.ResetOnSubmit or false
                    local RequireSubmit = Parameters.RequireSubmit or false
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local TextBox = {
                        OldValue = Default,
                        Value = Default,

                        Section = Section,
                        Offset = Section.Offset,
                    }


                    do
                        local Frame = Menu.Draw('Frame', {
                            Parent = Section.Frame,
                            Position = NewUDim2(0, 0, 0, Section.Offset),
                            Size = NewUDim2(1, 0, 0, 13),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Outline = Menu.Draw('Frame', {
                            Parent = Frame,
                            Position = NewUDim2(0, 10, 0, 0),
                            Size = NewUDim2(1, -20, 0, 26),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        local Box = Menu.Draw('TextBox', {
                            Parent = Inline,
                            Position = NewUDim2(0, 5, 0, 0),
                            Size = NewUDim2(1, -5, 1, 0),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            PlaceholderText = PlaceholderText,
                            Text = Default,
                            ClipsDescendants = true,
                            TextColor3 = Theme['Text Color'].A,
                            PlaceholderColor3 = Theme['Text Color'].B,
                            TextXAlignment = 'Left',
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 5) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 5) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        TextBox['Frame'] = Outline
                        TextBox['Box'] = Box
                    end


                    do
                        function TextBox.Get()
                            return TextBox.Value
                        end

                        function TextBox.Set(String)
                            TextBox.Box.Text = String
                            TextBox.Value = String

                            Callback(String)
                        end
                    end


                    do
                        local Box = TextBox['Box']

                        Connections[#Connections + 1] = Box.Focused:Connect(
                            function()
                                TextBox.OldValue = Box.Text
                            end
                        )

                        Connections[#Connections + 1] = Box.FocusLost:Connect(
                            function(Submitted)
                                Box.TextColor3 = Theme['Text Color'].A

                                if RequireSubmit and not Submitted then
                                    Box.Text = ClearText and Default
                                        or TextBox.OldValue

                                    return
                                end

                                local String = Box.Text

                                if ClearText then
                                    Box.TextColor3 = Theme.Accent
                                    Box.Text = ResetText

                                    Delay(0.35, function()
                                        Box.TextColor3 = Theme['Text Color'].A
                                        Box.Text = Default
                                    end)
                                end

                                TextBox.Value = ClearText and ResetText or String

                                Callback(String)
                            end
                        )
                    end

                    SetMetaTable(TextBox, Elements)

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = TextBox
                            else
                                Flags[Category] = {
                                    [Flag] = TextBox,
                                }
                            end
                        else
                            Flags[Flag] = TextBox
                        end
                    end

                    Section.Offset =Section.Offset+ 34

                    return TextBox
                end

                function Sections:Label(Parameters)
                    Parameters = Parameters or {}

                    local Section = self

                    local Text = Parameters.Text or 'New Label'
                    local Unsafe = Parameters.Unsafe or false
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local Label = {
                        Colorpickers = {},

                        Section = Section,
                        Offset = Section.Offset,
                    }


                    do
                        local Frame = Menu.Draw('Frame', {
                            Parent = Section.Frame,
                            Position = NewUDim2(0, 0, 0, Section.Offset),
                            Size = NewUDim2(1, 0, 0, 13),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local TextLabel = Menu.Draw('TextLabel', {
                            Parent = Frame,
                            Position = NewUDim2(0, 10, 0, 6),
                            Text = Text,
                            LineHeight = 1.35,
                            TextXAlignment = 'Left',
                            TextColor3 = Unsafe and Theme.Unsafe
                                or Theme['Text Color'].A,
                        })

                        TextLabel.Size = NewUDim2(1, -38, 0, TextLabel.TextBounds.Y)

                        Label['Frame'] = Frame
                        Label['TextLabel'] = TextLabel
                    end


                    do
                        local TextLabel = Label['TextLabel']

                        function Label.Set() end
                        function Label.Get() end

                        function Label.SetText(String)
                            TextLabel.Text = String
                            TextLabel.Size =
                                NewUDim2(1, -38, 0, TextLabel.TextBounds.Y)
                        end
                    end

                    SetMetaTable(Label, Elements)

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = Label
                            else
                                Flags[Category] = {
                                    [Flag] = Label,
                                }
                            end
                        else
                            Flags[Flag] = Label
                        end
                    end

                    Section.Offset =Section.Offset+ (Label.TextLabel.TextBounds.Y + 13)

                    return Label
                end
            end


            do
                function Elements:Colorpicker(Parameters)
                    Parameters = Parameters or {}

                    local Element = self
                    local Section = Element.Section
                    local Window = Section.Window

                    local Name = Parameters.Name or 'Text Color'
                    local Color = Parameters.Color or Theme.White
                    local Transparency = Parameters.Transparency
                    local Callback = Parameters.Callback or EmptyFunction
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local MovingValsat = false
                    local MovingHue = false
                    local MovingTransparency = false

                    local H, S, V = ToHSV(Color)

                    local IsTransparency = typeof(Transparency) == 'number'

                    local Colorpicker = {
                        Color = Color,

                        Hue = H,
                        Sat = S,
                        Vib = V,

                        Transparency = Transparency or 0,
                        Mode = 'Solid',
                    }


                    do
                        local Outline = Menu.Draw('Frame', {
                            Parent = Element.Frame,
                            Position = NewUDim2(
                                1,
                                -34 - (27 * #Element.Colorpickers),
                                0,
                                0
                            ),
                            Size = NewUDim2(0, 24, 0, 15),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        local Image = Menu.Draw('ImageLabel', {
                            Parent = Inline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Color,
                            BorderSizePixel = 0,
                            BackgroundTransparency = Colorpicker.Transparency,
                            Image = Images['Gradient 7'],
                            ImageTransparency = 0.3,
                        })

                        local Button = Menu.Draw('TextButton', {
                            Parent = Outline,
                            Position = EmptyUDim2,
                            Size = NewUDim2(1, 0, 1, 0),
                            BorderSizePixel = 0,
                            BackgroundTransparency = 1,
                            Text = '',
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 3) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 3) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Image, CornerRadius = NewUDim(0, 3) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Inline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Colorpicker['Frame'] = Outline
                        Colorpicker['Inline'] = Inline

                        Colorpicker['Image'] = Image
                        Colorpicker['Button'] = Button
                    end


                    do
                        function Colorpicker.Get()
                            return {
                                Colorpicker.Hue,
                                Colorpicker.Sat,
                                Colorpicker.Vib,
                                Colorpicker.Transparency,
                                Colorpicker.IsRainbow,
                            }
                        end

                        function Colorpicker.Set(Value, DoCallback)
                            if DoCallback == nil then
                                DoCallback = true
                            end

                            Colorpicker.Hue, Colorpicker.Sat, Colorpicker.Vib, Colorpicker.Transparency, Colorpicker.IsRainbow =
                                Unpack(Value)

                            Colorpicker.Refresh(DoCallback)
                        end

                        function Colorpicker.FromRGB(Value, DoCallback)
                            local H, S, V = ToHSV(Value)

                            Colorpicker.Set({
                                H,
                                S,
                                V,
                                Colorpicker.Transparency,
                                Colorpicker.IsRainbow,
                            }, DoCallback)
                        end

                        function Colorpicker.Refresh(DoCallback)
                            local Frame = Colorpicker['Image']

                            local Hue = Colorpicker.Hue

                            local NewColor =
                                FromHSV(Hue, Colorpicker.Sat, Colorpicker.Vib)
                            local NewTransparency = Colorpicker.Transparency

                            Colorpicker.Color = NewColor

                            Frame.BackgroundColor3 = NewColor

                            if Colorpicker.IsOpen then
                                local ValsatFrame = Colorpicker['ValsatFrame']
                                local ValsatCursor = Colorpicker['ValsatCursor2']

                                local Solid = Colorpicker['Solid']
                                local Pulse = Colorpicker['Pulse']
                                local Rainbow = Colorpicker['Rainbow']

                                local Mode = Colorpicker.Mode

                                local R, G, B = NewColor.R, NewColor.G, NewColor.B

                                ValsatFrame.ImageColor3 = FromHSV(Hue, 1, 1)

                                ValsatCursor.BackgroundColor3 = NewColor

                                if IsTransparency then
                                    local TransparencyFrame =
                                        Colorpicker['TransparencyFrame']

                                    Frame.BackgroundTransparency = NewTransparency
                                    TransparencyFrame.BackgroundColor3 = NewColor

                                    Colorpicker['Alpha Text'].Text =
                                        Format('A:%s', Round(NewTransparency * 255))
                                end

                                Colorpicker['Hex Text'].Text =
                                    Upper(Format('#%s', ToHex(NewColor)))

                                Colorpicker['Red Text'].Text =
                                    Format('R:%s', Round(R * 255))
                                Colorpicker['Green Text'].Text =
                                    Format('G:%s', Round(G * 255))
                                Colorpicker['Blue Text'].Text =
                                    Format('B:%s', Round(B * 255))

                                Solid.TextColor3 = Mode == 'Solid'
                                        and Colorpicker.Color
                                    or Theme['Text Color'].A
                                Pulse.TextColor3 = Mode == 'Pulse'
                                        and Colorpicker.Color
                                    or Theme['Text Color'].A
                                Rainbow.TextColor3 = Mode == 'Rainbow'
                                        and Colorpicker.Color
                                    or Theme['Text Color'].A
                            end

                            if DoCallback then
                                Callback(NewColor, NewTransparency)
                            end
                        end

                        function Colorpicker.Update()
                            if MovingValsat then
                                local ValsatFrame = Colorpicker['ValsatFrame']
                                local ValsatCursor = Colorpicker['ValsatCursor']

                                local MinX = ValsatFrame.AbsolutePosition.X
                                local MaxX = MinX + ValsatFrame.AbsoluteSize.X

                                local MinY = ValsatFrame.AbsolutePosition.Y
                                local MaxY = MinY + ValsatFrame.AbsoluteSize.Y

                                local MouseX = Clamp(Mouse.X, MinX, MaxX)
                                local MouseY = Clamp(Mouse.Y, MinY, MaxY)

                                local Sat = (MouseX - MinX) / (MaxX - MinX)
                                local Vib = 1 - ((MouseY - MinY) / (MaxY - MinY))

                                local VibPos = 1 - Colorpicker.Vib

                                Colorpicker.Sat = Sat
                                Colorpicker.Vib = Vib

                                Menu.Tween(
                                    ValsatCursor,
                                    NewTweenInfo(0.05, Enum.EasingStyle.Linear),
                                    { Position = NewUDim2(Sat, -4, VibPos, -4) }
                                )
                            end

                            if MovingHue then
                                local HueFrame = Colorpicker['HueFrame']
                                local HueCursor = Colorpicker['HueCursor']

                                local MinY = HueFrame.AbsolutePosition.Y
                                local MaxY = MinY + HueFrame.AbsoluteSize.Y

                                local MouseY = Clamp(Mouse.Y, MinY, MaxY)

                                local Hue = ((MouseY - MinY) / (MaxY - MinY))

                                Colorpicker.Hue = Hue

                                Menu.Tween(
                                    HueCursor,
                                    NewTweenInfo(0.05, Enum.EasingStyle.Linear),
                                    { Position = NewUDim2(0, 1, Hue, 1) }
                                )
                            end

                            if MovingTransparency then
                                local TransparencyFrame =
                                    Colorpicker['TransparencyFrame']
                                local TransparencyCursor =
                                    Colorpicker['TransparencyCursor']

                                local MinY = TransparencyFrame.AbsolutePosition.Y
                                local MaxY = MinY + TransparencyFrame.AbsoluteSize.Y

                                local MouseY = Clamp(Mouse.Y, MinY, MaxY)

                                local Trans = ((MouseY - MinY) / (MaxY - MinY))

                                Colorpicker.Transparency = Trans

                                Menu.Tween(
                                    TransparencyCursor,
                                    NewTweenInfo(0.05, Enum.EasingStyle.Linear),
                                    { Position = NewUDim2(0, 1, Trans, 1) }
                                )
                            end

                            if MovingValsat or MovingHue or MovingTransparency then
                                Colorpicker.Refresh(true)
                            end

                            RenderStepped:Wait()
                        end

                        function Colorpicker.Open()
                            if Colorpicker.IsOpen then
                                Colorpicker.Close()
                                return
                            end

                            Window:CloseContent({ Window.CurrentColorpicker })

                            Colorpicker.IsOpen = true
                            Window.CurrentColorpicker = Colorpicker


                            do
                                local NewColor = Colorpicker.Color
                                local R, G, B = NewColor.R, NewColor.G, NewColor.B

                                local Hex = ToHex(NewColor)


                                do
                                    local Outline = Menu.Draw('Frame', {
                                        Parent = Colorpicker.Frame,
                                        Position = NewUDim2(0, 0, 1, 8),
                                        Size = NewUDim2(
                                            0,
                                            IsTransparency and 238 or 218,
                                            0,
                                            303
                                        ),
                                        BackgroundColor3 = Theme.Inline,
                                        BorderSizePixel = 0,
                                        BackgroundTransparency = 1,
                                        ZIndex = 55000,
                                    })

                                    local Inline = Menu.Draw('Frame', {
                                        Parent = Outline,
                                        Position = NewUDim2(0, 1, 0, 1),
                                        Size = NewUDim2(1, -2, 1, -2),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Contrast.A,
                                        BackgroundTransparency = 1,
                                        ZIndex = Outline.ZIndex + 1,
                                    })

                                    Menu.Draw('TextLabel', {
                                        Parent = Inline,
                                        Text = Name,
                                        Position = NewUDim2(0, 11, 0, 16),
                                        TextXAlignment = 'Left',
                                        BackgroundTransparency = 1,
                                        ZIndex = Inline.ZIndex + 1,
                                        TextTransparency = 1,
                                        TextColor3 = Theme['Text Color'].A,
                                    })

                                    Menu.Draw('UICorner', {
                                        Parent = Outline,
                                        CornerRadius = NewUDim(0, 10),
                                    })
                                    Menu.Draw('UICorner', {
                                        Parent = Inline,
                                        CornerRadius = NewUDim(0, 10),
                                    })


                                    do
                                        Library.Colors[Outline] =
                                            { { 'BackgroundColor3', 'Inline' } }
                                        Library.Colors[Inline] = {
                                            { 'BackgroundColor3', 'Contrast', 'A' },
                                        }
                                    end

                                    Colorpicker['PickerOutline'] = Outline
                                    Colorpicker['PickerInline'] = Inline
                                end


                                do
                                    local Mode = Colorpicker.Mode

                                    local ModeOutline = Menu.Draw('Frame', {
                                        Parent = Colorpicker.PickerOutline,
                                        Position = NewUDim2(0, 11, 0, 33),
                                        Size = NewUDim2(1, -22, 0, 26),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Inline,
                                        BackgroundTransparency = 1,
                                        ZIndex = Colorpicker.PickerOutline.ZIndex
                                            + 1,
                                    })

                                    local ModeInline = Menu.Draw('Frame', {
                                        Parent = ModeOutline,
                                        Position = NewUDim2(0, 1, 0, 1),
                                        Size = NewUDim2(1, -2, 1, -2),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Contrast.A,
                                        BackgroundTransparency = 1,
                                        ZIndex = ModeOutline.ZIndex + 1,
                                    })

                                    local SolidButton = Menu.Draw('TextButton', {
                                        Parent = ModeInline,
                                        Position = EmptyUDim2,
                                        Size = NewUDim2(0.33, 0, 1, -1),
                                        BorderSizePixel = 0,
                                        BackgroundTransparency = 1,
                                        ZIndex = ModeInline.ZIndex + 1,
                                        Text = 'Solid',
                                        TextColor3 = Mode == 'Solid'
                                                and Colorpicker.Color
                                            or Theme['Text Color'].A,
                                        TextTransparency = 1,
                                    })

                                    local PulseButton = Menu.Draw('TextButton', {
                                        Parent = ModeInline,
                                        Position = NewUDim2(0.33, 1, 0, 0),
                                        Size = NewUDim2(0.33, 0, 1, -1),
                                        BorderSizePixel = 0,
                                        BackgroundTransparency = 1,
                                        ZIndex = ModeInline.ZIndex + 1,
                                        Text = 'Pulse',
                                        TextColor3 = Mode == 'Pulse'
                                                and Colorpicker.Color
                                            or Theme['Text Color'].A,
                                        TextTransparency = 1,
                                    })

                                    local RainbowButton = Menu.Draw('TextButton', {
                                        Parent = ModeInline,
                                        Position = NewUDim2(0.66, 1, 0, 0),
                                        Size = NewUDim2(0.33, 0, 1, -1),
                                        BorderSizePixel = 0,
                                        BackgroundTransparency = 1,
                                        ZIndex = ModeInline.ZIndex + 1,
                                        Text = 'Rainbow',
                                        TextColor3 = Mode == 'Rainbow'
                                                and Colorpicker.Color
                                            or Theme['Text Color'].A,
                                        TextTransparency = 1,
                                    })

                                    local Divider = Menu.Draw('Frame', {
                                        Parent = ModeInline,
                                        Size = NewUDim2(0, 1, 1, -8),
                                        Position = NewUDim2(0.33, 0, 0, 4),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Divider,
                                        ZIndex = ModeInline.ZIndex + 1,
                                    })

                                    local Divider2 = Menu.Draw('Frame', {
                                        Parent = ModeInline,
                                        Size = NewUDim2(0, 1, 1, -8),
                                        Position = NewUDim2(0.66, 0, 0, 4),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Divider,
                                        ZIndex = ModeInline.ZIndex + 1,
                                    })

                                    Menu.Draw('UICorner', {
                                        Parent = ModeOutline,
                                        CornerRadius = NewUDim(0, 4),
                                    })
                                    Menu.Draw('UICorner', {
                                        Parent = ModeInline,
                                        CornerRadius = NewUDim(0, 4),
                                    })


                                    do
                                        Library.Colors[ModeOutline] =
                                            { { 'BackgroundColor3', 'Inline' } }
                                        Library.Colors[ModeInline] = {
                                            { 'BackgroundColor3', 'Contrast', 'A' },
                                        }
                                        Library.Colors[Divider] =
                                            { { 'BackgroundColor3', 'Divider' } }
                                        Library.Colors[Divider2] =
                                            { { 'BackgroundColor3', 'Divider' } }
                                    end

                                    Colorpicker['Solid'] = SolidButton
                                    Colorpicker['Pulse'] = PulseButton
                                    Colorpicker['Rainbow'] = RainbowButton
                                end


                                do
                                    local RedOutline = Menu.Draw('Frame', {
                                        Parent = Colorpicker.PickerOutline,
                                        Position = NewUDim2(0, 11, 0, 244),
                                        Size = NewUDim2(0, 50, 0, 20),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Inline,
                                        BackgroundTransparency = 1,
                                        ZIndex = Colorpicker.PickerOutline.ZIndex
                                            + 1,
                                    })

                                    local RedInline = Menu.Draw('Frame', {
                                        Parent = RedOutline,
                                        Position = NewUDim2(0, 1, 0, 1),
                                        Size = NewUDim2(1, -2, 1, -2),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Contrast.A,
                                        BackgroundTransparency = 1,
                                        ZIndex = RedOutline.ZIndex + 1,
                                    })

                                    local RedText = Menu.Draw('TextLabel', {
                                        Parent = RedInline,
                                        Text = Format('R:%s', Round(R * 255)),
                                        AnchorPoint = NewVector2(0.5, 0.5),
                                        Position = NewUDim2(0.5, 0, 0.5, -1),
                                        BackgroundTransparency = 1,
                                        ZIndex = RedInline.ZIndex + 1,
                                        TextTransparency = 1,
                                        TextColor3 = Theme['Text Color'].A,
                                    })

                                    Menu.Draw('UICorner', {
                                        Parent = RedOutline,
                                        CornerRadius = NewUDim(0, 4),
                                    })
                                    Menu.Draw('UICorner', {
                                        Parent = RedInline,
                                        CornerRadius = NewUDim(0, 4),
                                    })


                                    do
                                        Library.Colors[RedOutline] =
                                            { { 'BackgroundColor3', 'Inline' } }
                                        Library.Colors[RedInline] = {
                                            { 'BackgroundColor3', 'Contrast', 'A' },
                                        }
                                    end

                                    Colorpicker['Red Text'] = RedText
                                end


                                do
                                    local GreenOutline = Menu.Draw('Frame', {
                                        Parent = Colorpicker.PickerOutline,
                                        Position = NewUDim2(0, 66, 0, 244),
                                        Size = NewUDim2(0, 50, 0, 20),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Inline,
                                        BackgroundTransparency = 1,
                                        ZIndex = Colorpicker.PickerOutline.ZIndex
                                            + 1,
                                    })

                                    local GreenInline = Menu.Draw('Frame', {
                                        Parent = GreenOutline,
                                        Position = NewUDim2(0, 1, 0, 1),
                                        Size = NewUDim2(1, -2, 1, -2),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Contrast.A,
                                        BackgroundTransparency = 1,
                                        ZIndex = GreenOutline.ZIndex + 1,
                                    })

                                    local GreenText = Menu.Draw('TextLabel', {
                                        Parent = GreenInline,
                                        Text = Format('G:%s', Round(G * 255)),
                                        AnchorPoint = NewVector2(0.5, 0.5),
                                        Position = NewUDim2(0.5, 0, 0.5, -1),
                                        BackgroundTransparency = 1,
                                        ZIndex = GreenInline.ZIndex + 1,
                                        TextTransparency = 1,
                                        TextColor3 = Theme['Text Color'].A,
                                    })

                                    Menu.Draw('UICorner', {
                                        Parent = GreenOutline,
                                        CornerRadius = NewUDim(0, 4),
                                    })
                                    Menu.Draw('UICorner', {
                                        Parent = GreenInline,
                                        CornerRadius = NewUDim(0, 4),
                                    })


                                    do
                                        Library.Colors[GreenOutline] =
                                            { { 'BackgroundColor3', 'Inline' } }
                                        Library.Colors[GreenInline] = {
                                            { 'BackgroundColor3', 'Contrast', 'A' },
                                        }
                                    end

                                    Colorpicker['Green Text'] = GreenText
                                end


                                do
                                    local BlueOutline = Menu.Draw('Frame', {
                                        Parent = Colorpicker.PickerOutline,
                                        Position = NewUDim2(0, 121, 0, 244),
                                        Size = NewUDim2(0, 50, 0, 20),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Inline,
                                        BackgroundTransparency = 1,
                                        ZIndex = Colorpicker.PickerOutline.ZIndex
                                            + 1,
                                    })

                                    local BlueInline = Menu.Draw('Frame', {
                                        Parent = BlueOutline,
                                        Position = NewUDim2(0, 1, 0, 1),
                                        Size = NewUDim2(1, -2, 1, -2),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Contrast.A,
                                        BackgroundTransparency = 1,
                                        ZIndex = BlueOutline.ZIndex + 1,
                                    })

                                    local BlueText = Menu.Draw('TextLabel', {
                                        Parent = BlueInline,
                                        Text = Format('B:%s', Round(B * 255)),
                                        AnchorPoint = NewVector2(0.5, 0.5),
                                        Position = NewUDim2(0.5, 0, 0.5, -1),
                                        BackgroundTransparency = 1,
                                        ZIndex = BlueInline.ZIndex + 1,
                                        TextTransparency = 1,
                                        TextColor3 = Theme['Text Color'].A,
                                    })

                                    Menu.Draw('UICorner', {
                                        Parent = BlueOutline,
                                        CornerRadius = NewUDim(0, 4),
                                    })
                                    Menu.Draw('UICorner', {
                                        Parent = BlueInline,
                                        CornerRadius = NewUDim(0, 4),
                                    })


                                    do
                                        Library.Colors[BlueOutline] =
                                            { { 'BackgroundColor3', 'Inline' } }
                                        Library.Colors[BlueInline] = {
                                            { 'BackgroundColor3', 'Contrast', 'A' },
                                        }
                                    end

                                    Colorpicker['Blue Text'] = BlueText
                                end


                                do
                                    if IsTransparency then
                                        local AlphaOutline = Menu.Draw('Frame', {
                                            Parent = Colorpicker.PickerOutline,
                                            Position = NewUDim2(0, 176, 0, 244),
                                            Size = NewUDim2(0, 51, 0, 20),
                                            BorderSizePixel = 0,
                                            BackgroundColor3 = Theme.Inline,
                                            BackgroundTransparency = 1,
                                            ZIndex = Colorpicker.PickerOutline.ZIndex
                                                + 1,
                                        })

                                        local AlphaInline = Menu.Draw('Frame', {
                                            Parent = AlphaOutline,
                                            Position = NewUDim2(0, 1, 0, 1),
                                            Size = NewUDim2(1, -2, 1, -2),
                                            BorderSizePixel = 0,
                                            BackgroundColor3 = Theme.Contrast.A,
                                            BackgroundTransparency = 1,
                                            ZIndex = AlphaOutline.ZIndex + 1,
                                        })

                                        local AlphaText = Menu.Draw('TextLabel', {
                                            Parent = AlphaInline,
                                            Text = Format(
                                                'A:%s',
                                                Round(Transparency * 255)
                                            ),
                                            AnchorPoint = NewVector2(0.5, 0.5),
                                            Position = NewUDim2(0.5, 0, 0.5, -1),
                                            BackgroundTransparency = 1,
                                            ZIndex = AlphaInline.ZIndex + 1,
                                            TextTransparency = 1,
                                            TextColor3 = Theme['Text Color'].A,
                                        })

                                        Menu.Draw('UICorner', {
                                            Parent = AlphaOutline,
                                            CornerRadius = NewUDim(0, 4),
                                        })
                                        Menu.Draw('UICorner', {
                                            Parent = AlphaInline,
                                            CornerRadius = NewUDim(0, 4),
                                        })


                                        do
                                            Library.Colors[AlphaOutline] =
                                                { { 'BackgroundColor3', 'Inline' } }
                                            Library.Colors[AlphaInline] = {
                                                {
                                                    'BackgroundColor3',
                                                    'Contrast',
                                                    'A',
                                                },
                                            }
                                        end

                                        Colorpicker['Alpha Text'] = AlphaText
                                    end
                                end


                                do
                                    local HexOutline = Menu.Draw('Frame', {
                                        Parent = Colorpicker.PickerOutline,
                                        Position = NewUDim2(0, 11, 0, 270),
                                        Size = NewUDim2(1, -22, 0, 20),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Inline,
                                        BackgroundTransparency = 1,
                                        ZIndex = Colorpicker.PickerOutline.ZIndex
                                            + 1,
                                    })

                                    local HexInline = Menu.Draw('Frame', {
                                        Parent = HexOutline,
                                        Position = NewUDim2(0, 1, 0, 1),
                                        Size = NewUDim2(1, -2, 1, -2),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Contrast.A,
                                        BackgroundTransparency = 1,
                                        ZIndex = HexOutline.ZIndex + 1,
                                    })

                                    local HexText = Menu.Draw('TextLabel', {
                                        Parent = HexInline,
                                        Text = Upper(Format('#%s', Hex)),
                                        AnchorPoint = NewVector2(0, 0.5),
                                        Position = NewUDim2(0, 5, 0.5, -1),
                                        BackgroundTransparency = 1,
                                        ZIndex = HexInline.ZIndex + 1,
                                        TextTransparency = 1,
                                        TextColor3 = Theme['Text Color'].A,
                                        TextXAlignment = 'Left',
                                    })

                                    Menu.Draw('UICorner', {
                                        Parent = HexOutline,
                                        CornerRadius = NewUDim(0, 4),
                                    })
                                    Menu.Draw('UICorner', {
                                        Parent = HexInline,
                                        CornerRadius = NewUDim(0, 4),
                                    })


                                    do
                                        Library.Colors[HexOutline] =
                                            { { 'BackgroundColor3', 'Inline' } }
                                        Library.Colors[HexInline] = {
                                            { 'BackgroundColor3', 'Contrast', 'A' },
                                        }
                                    end

                                    Colorpicker['Hex Text'] = HexText
                                end
                            end


                            do
                                local Vib = 1 - V

                                local ValsatOutline = Menu.Draw('Frame', {
                                    Parent = Colorpicker.PickerInline,
                                    Position = NewUDim2(0, 10, 0, 63),
                                    Size = NewUDim2(0, 175, 0, 175),
                                    BackgroundColor3 = Theme.Inline,
                                    BackgroundTransparency = 1,
                                    ZIndex = Colorpicker.PickerInline.ZIndex + 1,
                                    BorderSizePixel = 0,
                                })

                                local ValsatInline = Menu.Draw('ImageButton', {
                                    Parent = ValsatOutline,
                                    Position = NewUDim2(0, 1, 0, 1),
                                    Size = NewUDim2(1, -2, 1, -2),
                                    BackgroundColor3 = Theme.White,
                                    ImageColor3 = FromHSV(H, 1, 1),
                                    Image = Images['Colorpicker Valsat 3'],
                                    BorderSizePixel = 0,
                                    ImageTransparency = 0,
                                    ZIndex = ValsatOutline.ZIndex + 1,
                                })

                                local CursorOutline = Menu.Draw('Frame', {
                                    Parent = ValsatInline,
                                    Position = NewUDim2(S, -4, Vib, -4),
                                    Size = NewUDim2(0, 10, 0, 10),
                                    BackgroundTransparency = 1,
                                    BackgroundColor3 = Theme.Black,
                                    BorderSizePixel = 0,
                                    ZIndex = 56000,
                                })

                                local CursorInline = Menu.Draw('Frame', {
                                    Parent = CursorOutline,
                                    Position = NewUDim2(0, 2, 0, 2),
                                    Size = NewUDim2(1, -4, 1, -4),
                                    BackgroundTransparency = 1,
                                    BackgroundColor3 = Color,
                                    BorderSizePixel = 0,
                                    ZIndex = CursorOutline.ZIndex + 1,
                                })

                                Menu.Draw('UICorner', {
                                    Parent = CursorOutline,
                                    CornerRadius = NewUDim(1, 0),
                                })
                                Menu.Draw('UICorner', {
                                    Parent = CursorInline,
                                    CornerRadius = NewUDim(1, 0),
                                })


                                do
                                    Library.Colors[ValsatOutline] =
                                        { { 'BackgroundColor3', 'Inline' } }
                                end

                                Colorpicker['ValsatFrame'] = ValsatInline
                                Colorpicker['ValsatCursor'] = CursorOutline
                                Colorpicker['ValsatCursor2'] = CursorInline
                            end


                            do
                                local HueOutline = Menu.Draw('Frame', {
                                    Parent = Colorpicker.PickerInline,
                                    Position = NewUDim2(0, 188, 0, 63),
                                    Size = NewUDim2(0, 18, 0, 175),
                                    BorderSizePixel = 0,
                                    BackgroundColor3 = Theme.Inline,
                                    BackgroundTransparency = 1,
                                    ZIndex = Colorpicker.PickerInline.ZIndex + 1,
                                })

                                local HueInline = Menu.Draw('ImageButton', {
                                    Parent = HueOutline,
                                    Position = NewUDim2(0, 1, 0, 1),
                                    Size = NewUDim2(1, -2, 1, -2),
                                    BorderSizePixel = 0,
                                    BackgroundColor3 = Theme.White,
                                    Image = Images['Colorpicker Hue2'],
                                    BackgroundTransparency = 1,
                                    ImageTransparency = 1,
                                    Rotation = 0,
                                    ScaleType = 'Crop',
                                    ZIndex = HueOutline.ZIndex + 1,
                                    ClipsDescendants = true,
                                })

                                local Cursor = Menu.Draw('Frame', {
                                    Parent = HueInline,
                                    Position = NewUDim2(0, 0, H, 1),
                                    Size = NewUDim2(1, -2, 0, 2),
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                    ZIndex = HueInline.ZIndex + 1,
                                })

                                Menu.Draw('UIStroke', {
                                    Parent = Cursor,
                                    Color = Theme.Black,
                                    Transparency = 1,
                                })


                                do
                                    Library.Colors[HueOutline] =
                                        { { 'BackgroundColor3', 'Inline' } }
                                end

                                Colorpicker['HueFrame'] = HueInline
                                Colorpicker['HueCursor'] = Cursor
                            end


                            do
                                if IsTransparency then
                                    local TransparencyOutline = Menu.Draw('Frame', {
                                        Parent = Colorpicker.PickerInline,
                                        Position = NewUDim2(0, 208, 0, 63),
                                        Size = NewUDim2(0, 18, 0, 175),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Theme.Inline,
                                        BackgroundTransparency = 1,
                                        ZIndex = Colorpicker.PickerInline.ZIndex
                                            + 1,
                                    })

                                    local TransparencyInline = Menu.Draw('Frame', {
                                        Parent = TransparencyOutline,
                                        Position = NewUDim2(0, 1, 0, 1),
                                        Size = NewUDim2(1, -2, 1, -2),
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Color,
                                        ZIndex = TransparencyOutline.ZIndex + 1,
                                        ClipsDescendants = true,
                                    })

                                    local Button = Menu.Draw('TextButton', {
                                        Parent = TransparencyOutline,
                                        Position = EmptyUDim2,
                                        Size = NewUDim2(1, 0, 1, 0),
                                        BorderSizePixel = 0,
                                        BackgroundTransparency = 1,
                                        ZIndex = TransparencyOutline.ZIndex + 1,
                                        Text = '',
                                    })

                                    local Cursor = Menu.Draw('Frame', {
                                        Parent = TransparencyInline,
                                        Position = NewUDim2(0, 1, Transparency, 1),
                                        Size = NewUDim2(1, -2, 0, 2),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        ZIndex = TransparencyInline.ZIndex + 1,
                                    })

                                    Menu.Draw('UIStroke', {
                                        Parent = Cursor,
                                        Color = Theme.Black,
                                        Transparency = 1,
                                    })
                                    Menu.Draw('UIGradient', {
                                        Parent = TransparencyInline,
                                        Transparency = NewNumberSequence({
                                            NewNumberKeypoint(0, 0, 0),
                                            NewNumberKeypoint(1, 0.95, 0),
                                        }),
                                        Rotation = 90,
                                    })


                                    do
                                        Library.Colors[TransparencyOutline] =
                                            { { 'BackgroundColor3', 'Inline' } }
                                    end

                                    Colorpicker['TransparencyFrame'] =
                                        TransparencyInline
                                    Colorpicker['TransparencyButton'] = Button

                                    Colorpicker['TransparencyCursor'] = Cursor
                                end
                            end


                            do
                                local ValsatFrame = Colorpicker['ValsatFrame']
                                local HueFrame = Colorpicker['HueFrame']
                                local TransparencyFrame =
                                    Colorpicker['TransparencyButton']

                                local Solid = Colorpicker['Solid']
                                local Pulse = Colorpicker['Pulse']
                                local Rainbow = Colorpicker['Rainbow']

                                Library.InputChanged[#Library.InputChanged + 1] = function(
                                    Input
                                )
                                    if
                                        Input.UserInputType
                                        == Enum.UserInputType.MouseMovement
                                    then
                                        Colorpicker.Update()
                                    end
                                end

                                Connections[#Connections + 1] = ValsatFrame.MouseButton1Down:Connect(
                                    function()
                                        MovingValsat = true

                                        Colorpicker.Update()
                                    end
                                )

                                Connections[#Connections + 1] = ValsatFrame.InputEnded:Connect(
                                    function()
                                        if
                                            UserInputService:IsMouseButtonPressed(
                                                Enum.UserInputType.MouseButton1
                                            )
                                        then
                                            return
                                        end

                                        MovingValsat = false
                                    end
                                )

                                Connections[#Connections + 1] = HueFrame.MouseButton1Down:Connect(
                                    function()
                                        MovingHue = true

                                        Colorpicker.Update()
                                    end
                                )

                                Connections[#Connections + 1] = HueFrame.InputEnded:Connect(
                                    function()
                                        if
                                            UserInputService:IsMouseButtonPressed(
                                                Enum.UserInputType.MouseButton1
                                            )
                                        then
                                            return
                                        end

                                        MovingHue = false
                                    end
                                )

                                Connections[#Connections + 1] = Solid.MouseButton1Down:Connect(
                                    function()
                                        Colorpicker.Mode = 'Solid'

                                        Colorpicker.Refresh(true)
                                    end
                                )

                                Connections[#Connections + 1] = Pulse.MouseButton1Down:Connect(
                                    function()
                                        Colorpicker.Mode = 'Pulse'

                                        Colorpicker.Refresh(true)
                                    end
                                )

                                Connections[#Connections + 1] = Rainbow.MouseButton1Down:Connect(
                                    function()
                                        Colorpicker.Mode = 'Rainbow'

                                        Colorpicker.Refresh(true)
                                    end
                                )

                                if IsTransparency then
                                    Connections[#Connections + 1] = TransparencyFrame.MouseButton1Down:Connect(
                                        function()
                                            MovingTransparency = true

                                            Colorpicker.Update()
                                        end
                                    )

                                    Connections[#Connections + 1] = TransparencyFrame.InputEnded:Connect(
                                        function()
                                            if
                                                UserInputService:IsMouseButtonPressed(
                                                    Enum.UserInputType.MouseButton1
                                                )
                                            then
                                                return
                                            end

                                            MovingTransparency = false
                                        end
                                    )
                                end
                            end


                            do
                                local Descendants =
                                    Menu.GetDescendants(Colorpicker.PickerOutline)


                                do
                                    local Sat = Colorpicker.Sat
                                    local Vib = 1 - Colorpicker.Vib

                                    Menu.Tween(
                                        Colorpicker.ValsatFrame,
                                        NewTweenInfo(0.3, Enum.EasingStyle.Linear),
                                        {
                                            ImageColor3 = FromHSV(
                                                Colorpicker.Hue,
                                                1,
                                                1
                                            ),
                                        }
                                    )

                                    Menu.Tween(
                                        Colorpicker.ValsatCursor,
                                        NewTweenInfo(0.3, Enum.EasingStyle.Linear),
                                        { Position = NewUDim2(Sat, -4, Vib, -4) }
                                    )

                                    Menu.Tween(
                                        Colorpicker['ValsatCursor2'],
                                        NewTweenInfo(0.3, Enum.EasingStyle.Linear),
                                        { BackgroundColor3 = Colorpicker.Color }
                                    )
                                end


                                do
                                    if not Colorpicker.IsRainbow then
                                        Menu.Tween(
                                            Colorpicker.HueCursor,
                                            NewTweenInfo(
                                                0.3,
                                                Enum.EasingStyle.Linear
                                            ),
                                            {
                                                Position = NewUDim2(
                                                    0,
                                                    1,
                                                    Colorpicker.Hue,
                                                    1
                                                ),
                                            }
                                        )
                                    end
                                end


                                do
                                    if IsTransparency then
                                        Menu.Tween(
                                            Colorpicker.TransparencyFrame,
                                            NewTweenInfo(
                                                0.3,
                                                Enum.EasingStyle.Linear
                                            ),
                                            { BackgroundColor3 = Colorpicker.Color }
                                        )

                                        Menu.Tween(
                                            Colorpicker.TransparencyCursor,
                                            NewTweenInfo(
                                                0.3,
                                                Enum.EasingStyle.Linear
                                            ),
                                            {
                                                Position = NewUDim2(
                                                    0,
                                                    1,
                                                    Colorpicker.Transparency,
                                                    1
                                                ),
                                            }
                                        )
                                    end
                                end

                                for i = 1, #Descendants do
                                    local Descendant = Descendants[i]

                                    if
                                        IsA(Descendant, 'UIGradient')
                                        or IsA(Descendant, 'UICorner')
                                        or Descendant == Colorpicker['TransparencyCursor']
                                        or Descendant == Colorpicker['HueCursor']
                                        or Descendant
                                            == Colorpicker['TransparencyButton']
                                    then
                                        continue
                                    end

                                    local Properties =
                                        { BackgroundTransparency = 0 }

                                    if
                                        IsA(Descendant, 'ImageLabel')
                                        or IsA(Descendant, 'ImageButton')
                                    then
                                        Properties = {
                                            ImageTransparency = (
                                                IsTransparency
                                                and (
                                                    Descendant
                                                        == Colorpicker.TransparencyGradient
                                                    and 0.2
                                                )
                                            )
                                                or 0,
                                        }
                                    elseif IsA(Descendant, 'UIStroke') then
                                        Properties = { Transparency = 0 }
                                    elseif
                                        IsA(Descendant, 'TextLabel')
                                        or IsA(Descendant, 'TextButton')
                                    then
                                        Properties = { TextTransparency = 0 }
                                    elseif
                                        Descendant == Colorpicker['ValsatCursor2']
                                    then
                                        Properties =
                                            { BackgroundTransparency = 0.2 }
                                    elseif
                                        Descendant == Colorpicker['ValsatCursor']
                                    then
                                        Properties =
                                            { BackgroundTransparency = 0.15 }
                                    end

                                    Menu.Tween(
                                        Descendant,
                                        NewTweenInfo(0.1, Enum.EasingStyle.Linear),
                                        Properties
                                    )
                                end
                            end
                        end

                        function Colorpicker.Close()
                            if not Colorpicker.IsOpen then
                                return
                            end

                            Colorpicker.IsOpen = false
                            Window.CurrentColorpicker = nil

                            MovingValsat = false
                            MovingTransparency = false
                            MovingHue = false


                            do
                                local Descendants =
                                    Menu.GetDescendants(Colorpicker.PickerOutline)


                                do
                                    local Vib = 1 - V

                                    Colorpicker.ValsatFrame.BackgroundTransparency =
                                        1

                                    Menu.Tween(
                                        Colorpicker.ValsatFrame,
                                        NewTweenInfo(0.1, Enum.EasingStyle.Linear),
                                        { ImageColor3 = FromHSV(H, 1, 1) }
                                    )

                                    Menu.Tween(
                                        Colorpicker.ValsatCursor,
                                        NewTweenInfo(0.1, Enum.EasingStyle.Linear),
                                        { Position = NewUDim2(S, -4, Vib, -4) }
                                    )
                                end


                                do
                                    if not Colorpicker.IsRainbow then
                                        Menu.Tween(
                                            Colorpicker.HueCursor,
                                            NewTweenInfo(
                                                0.1,
                                                Enum.EasingStyle.Linear
                                            ),
                                            { Position = NewUDim2(0, 1, H, 1) }
                                        )
                                    end
                                end


                                do
                                    if IsTransparency then
                                        Menu.Tween(
                                            Colorpicker.TransparencyFrame,
                                            NewTweenInfo(
                                                0.3,
                                                Enum.EasingStyle.Linear
                                            ),
                                            { BackgroundColor3 = Color }
                                        )

                                        Menu.Tween(
                                            Colorpicker.TransparencyCursor,
                                            NewTweenInfo(
                                                0.3,
                                                Enum.EasingStyle.Linear
                                            ),
                                            {
                                                Position = NewUDim2(
                                                    0,
                                                    1,
                                                    Transparency,
                                                    1
                                                ),
                                            }
                                        )
                                    end
                                end

                                for i = 1, #Descendants do
                                    local Descendant = Descendants[i]

                                    if
                                        IsA(Descendant, 'UIGradient')
                                        or IsA(Descendant, 'UICorner')
                                    then
                                        continue
                                    end

                                    local Properties =
                                        { BackgroundTransparency = 1 }

                                    if
                                        IsA(Descendant, 'ImageLabel')
                                        or IsA(Descendant, 'ImageButton')
                                    then
                                        Properties = { ImageTransparency = 1 }
                                    elseif IsA(Descendant, 'UIStroke') then
                                        Properties = { Transparency = 1 }
                                    elseif
                                        IsA(Descendant, 'TextLabel')
                                        or IsA(Descendant, 'TextButton')
                                    then
                                        Properties = { TextTransparency = 1 }
                                    end

                                    Menu.Tween(
                                        Descendant,
                                        NewTweenInfo(0.1, Enum.EasingStyle.Linear),
                                        Properties
                                    )
                                end
                            end

                            Delay(0.1, function()
                                Menu.Remove(Colorpicker.PickerOutline)
                            end)
                        end
                    end


                    do
                        Connections[#Connections + 1] =
                            Colorpicker['Button'].MouseButton1Down:Connect(
                                Colorpicker.Open
                            )

                        Library.RenderStepped[#Library.RenderStepped + 1] = function()
                            local Mode = Colorpicker.Mode

                            if Mode == 'Solid' then
                                return
                            end

                            if Mode == 'Pulse' and IsTransparency then
                                local TransparencyCursor =
                                    Colorpicker.TransparencyCursor

                                local NewTransparency = (Sin(Tick() * 1.4) + 1) / 2

                                Colorpicker.Transparency = NewTransparency

                                if TransparencyCursor then
                                    TransparencyCursor.Position =
                                        NewUDim2(0, 1, NewTransparency, 1)
                                end
                            elseif Mode == 'Rainbow' then
                                local HueCursor = Colorpicker.HueCursor

                                local NewHue = (Sin(Tick() * 1.4) + 1) / 2

                                Colorpicker.Hue = NewHue

                                if HueCursor then
                                    HueCursor.Position = NewUDim2(0, 1, NewHue, 1)
                                end
                            end

                            Colorpicker.Refresh(true)
                        end
                    end

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = Colorpicker
                            else
                                Flags[Category] = {
                                    [Flag] = Colorpicker,
                                }
                            end
                        else
                            Flags[Flag] = Colorpicker
                        end
                    end

                    Element.Colorpickers[#Element.Colorpickers + 1] = Colorpicker

                    return Element, Colorpicker
                end

                function Elements:Keybind(Parameters)


                    Parameters = Parameters or {}

                    local Element = self
                    local Section = Element.Section
                    local Window = Section.Window

                    local Default = Parameters.Default or 'None'
                    local Mode = Parameters.Mode or 'Toggle'
                    local Modes = Parameters.Modes
                        or { 'Always', 'Toggle', 'On Hold', 'Off Hold' }
                    local Activated = Parameters.Activated or EmptyFunction
                    local Changed = Parameters.Changed or EmptyFunction
                    local Flag = Parameters.Flag
                    local Category = Parameters.Category

                    local Keybind = {
                        Modes = Modes,
                        Mode = Mode,

                        Active = Mode == 'Always' or Mode == 'Off Hold',
                        IsOpen = false,

                        Value = {},
                        ModeButtons = {},
                        Update = {},

                        Name = Parameters.Name or Flag or 'Keybind',
                        Exclude = Parameters.Exclude and true or false,
                    }


                    do
                        local Outline = Menu.Draw('Frame', {
                            Parent = Element.Frame,
                            Position = NewUDim2(1, -154, 0, 0),
                            Size = NewUDim2(0, 144, 0, 26),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                        })

                        local Inline = Menu.Draw('Frame', {
                            Parent = Outline,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                        })

                        local Button = Menu.Draw('TextButton', {
                            Parent = Outline,
                            Position = EmptyUDim2,
                            Size = NewUDim2(1, 0, 1, 0),
                            Text = '',
                            BackgroundTransparency = 1,
                        })

                        local Label = Menu.Draw('TextLabel', {
                            Parent = Inline,
                            AnchorPoint = NewVector2(0.5, 0.5),
                            Position = NewUDim2(0.5, 0, 0.5, -1),
                            Text = 'Key: None',
                            BackgroundTransparency = 1,
                            TextColor3 = Theme['Text Color'].B,
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outline, CornerRadius = NewUDim(0, 6) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inline, CornerRadius = NewUDim(0, 6) }
                        )


                        do
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Outline] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Keybind['Frame'] = Outline

                        Keybind['Label'] = Label
                        Keybind['Button'] = Button
                    end


                    do
                        function Keybind.Get()
                            return { Keybind.Active, Keybind.Value }
                        end

                        function Keybind.Set(Table)
                            local Value = Table[2]

                            Keybind.Active = Table[1]
                            Keybind.Value = Value

                            Keybind.Label.Text = Format(
                                'Key: %s',
                                #Value > 0 and Keybind.Shorten(Value[2]) or 'None'
                            )

                            Changed(Value, Keybind.Active)
                        end

                        function Keybind.Shorten(String)
                            for Index, Value in next, Menu.InputShorts do
                                String = Gsub(String, Index, Value)
                            end

                            return String
                        end

                        function Keybind.SetKeyFromInput(Input)
                            if
                                Input.EnumType
                                and (
                                    Input.EnumType == Enum.KeyCode
                                    or Input.EnumType == Enum.UserInputType
                                )
                            then
                                local InputName = Input.Name

                                if
                                    Find(Menu.KeyCodes, InputName)
                                    or Find(Menu.InputTypes, InputName)
                                then
                                    local Value = {
                                        Input.EnumType == Enum.KeyCode
                                                and 'KeyCode'
                                            or 'UserInputType',
                                        InputName,
                                    }

                                    Keybind.Value = Value
                                    Keybind.Label.Text = Format(
                                        'Key: %s',
                                        #Value > 0 and Keybind.Shorten(Value[2])
                                            or 'None'
                                    )

                                    if Keybind.SelectConnection then
                                        Keybind.SelectConnection:Disconnect()
                                        Keybind.SelectConnection = nil
                                    end

                                    Changed(Keybind.Value, Keybind.Active)

                                    return true
                                elseif
                                    InputName == 'Backspace'
                                    or InputName == 'Escape'
                                then
                                    Keybind.Value = {}
                                    Keybind.Label.Text = 'Key: None'

                                    if Keybind.SelectConnection then
                                        Keybind.SelectConnection:Disconnect()
                                        Keybind.SelectConnection = nil
                                    end

                                    Element.Set(false)
                                    Keybind.Active = false

                                    Changed(Keybind.Value, Keybind.Active)

                                    return true
                                end
                            end

                            return false
                        end

                        function Keybind.SetPickable(Boolean)
                            Keybind.IsSelecting = Boolean

                            Keybind.Label.TextColor3 = Boolean
                                    and Theme['Text Color'].A
                                or Theme['Text Color'].B

                            if Boolean then
                                --Keybind.Close()

                                Delay(0.1, function()
                                    Keybind.SelectConnection = UserInputService.InputBegan:Connect(
                                        function(Input)
                                            local Selected =
                                                Keybind.SetKeyFromInput(
                                                    Input.KeyCode.Name ~= 'Unknown'
                                                            and Input.KeyCode
                                                        or Input.UserInputType
                                                )

                                            if Selected then
                                                Keybind.SetPickable(false)
                                            end
                                        end
                                    )

                                    Connections[#Connections + 1] =
                                        Keybind.SelectConnection
                                end)
                            else
                                if Keybind.SelectConnection then
                                    Keybind.SelectConnection:Disconnect()
                                    Keybind.SelectConnection = nil
                                end
                            end
                        end
                    end


                    do
                        local KeybindButton = Keybind['Button']

                        Connections[#Connections + 1] = KeybindButton.MouseButton1Down:Connect(
                            function()
                                Keybind.SetPickable(not Keybind.IsSelecting)
                            end
                        )

                        Library.InputBegan[#Library.InputBegan + 1] = function(
                            Input
                        )
                            if UserInputService:GetFocusedTextBox() then
                                return
                            end

                            local Value = Keybind.Value

                            if
                                not Keybind.IsSelecting
                                and Value[1]
                                and Value[2]
                            then
                                if
                                    Input.KeyCode == Enum[Value[1] ][Value[2] ]
                                    or Input.UserInputType
                                        == Enum[Value[1] ][Value[2] ]
                                then
                                    if Keybind.Mode == 'Always' then
                                        return
                                    end

                                    local NewActive = true

                                    if Keybind.Mode == 'Toggle' then
                                        NewActive = not Element.Value
                                    elseif Keybind.Mode == 'Off Hold' then
                                        NewActive = false
                                    end

                                    Keybind.Active = NewActive
                                    Element.Set(NewActive)

                                    if NewActive then
                                        Activated()
                                    end
                                end
                            end
                        end

                        Library.InputEnded[#Library.InputEnded + 1] = function(
                            Input
                        )
                            if UserInputService:GetFocusedTextBox() then
                                return
                            end

                            local Value = Keybind.Value

                            if
                                not Keybind.IsSelecting
                                and Value[1]
                                and Value[2]
                            then
                                if
                                    Input.KeyCode == Enum[Value[1] ][Value[2] ]
                                    or Input.UserInputType
                                        == Enum[Value[1] ][Value[2] ]
                                then
                                    if
                                        Keybind.Mode == 'Toggle'
                                        or Keybind.Mode == 'Always'
                                    then
                                        return
                                    end

                                    local NewActive = false

                                    if Keybind.Mode == 'Off Hold' then
                                        NewActive = true
                                    end

                                    Keybind.Active = NewActive
                                    Element.Set(NewActive)

                                    if NewActive then
                                        Activated()
                                    end
                                end
                            end
                        end
                    end

                    if Flag then
                        if Category then
                            if typeof(Flags[Category]) == 'table' then
                                Flags[Category][Flag] = Keybind
                            else
                                Flags[Category] = {
                                    [Flag] = Keybind,
                                }
                            end
                        else
                            Flags[Flag] = Keybind
                        end
                    end

                    Keybind.SetKeyFromInput(Default)
                    Element.Set(Mode == 'Always' or Mode == 'Off Hold')

                    Element.Bind = Keybind

                    Window.Keybinds[#Window.Keybinds + 1] = Keybind

                    Section.Offset =Section.Offset+ 9

                    return Keybind
                end

                function Elements:Settings(Parameters)
                    Parameters = Parameters or {}

                    local Element = self
                    local Section = Element.Section
                    local Window = Section.Window

                    local SectionFrame = Section.Frame

                    local Size = Parameters.Size or 54

                    local Settings = {
                        IsOpen = false,

                        Offset = 13,
                        Window = Section.Window,
                    }


                    do
                        local AbsolutePosition = SectionFrame.AbsolutePosition

                        local Outline = Menu.Draw('Frame', {
                            Parent = Element.Frame,
                            Position = NewUDim2(1, -12, 0, 0),
                            Size = NewUDim2(0, 14, 0, 14),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                        })

                        local Image = Menu.Draw('ImageButton', {
                            Parent = Outline,
                            Position = NewUDim2(0, -14, 0, -2),
                            Size = NewUDim2(1, 0, 1, 0),
                            BackgroundTransparency = 1,
                            Image = Images['Settings 2'],
                            ImageColor3 = NewRGB(128, 128, 128),
                        })

                        local Outer = Menu.Draw('Frame', {
                            Parent = Menu.Overlay2,
                            Position = NewUDim2(
                                0,
                                AbsolutePosition.X + 10,
                                0,
                                AbsolutePosition.Y + Element.Offset + 20
                            ),
                            Size = NewUDim2(
                                0,
                                SectionFrame.AbsoluteSize.X - 20,
                                0,
                                Size
                            ),
                            BackgroundColor3 = Theme.Outline,
                            BorderSizePixel = 0,
                            Visible = false,
                        })

                        local Inner = Menu.Draw('Frame', {
                            Parent = Outer,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Inline,
                            BorderSizePixel = 0,
                            ZIndex = Outer.ZIndex + 1,
                        })

                        local Background = Menu.Draw('Frame', {
                            Parent = Inner,
                            Position = NewUDim2(0, 1, 0, 1),
                            Size = NewUDim2(1, -2, 1, -2),
                            BackgroundColor3 = Theme.Contrast.A,
                            BorderSizePixel = 0,
                            ZIndex = Inner.ZIndex + 1,
                        })

                        Menu.Draw(
                            'UICorner',
                            { Parent = Outer, CornerRadius = NewUDim(0, 10) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Inner, CornerRadius = NewUDim(0, 10) }
                        )
                        Menu.Draw(
                            'UICorner',
                            { Parent = Background, CornerRadius = NewUDim(0, 10) }
                        )


                        do
                            Library.Colors[Outer] =
                                { { 'BackgroundColor3', 'Outline' } }
                            Library.Colors[Inner] =
                                { { 'BackgroundColor3', 'Inline' } }
                            Library.Colors[Background] =
                                { { 'BackgroundColor3', 'Contrast', 'A' } }
                        end

                        Settings['Frame'] = Outer

                        Settings['Image'] = Image
                    end


                    do
                        local Frame = Settings['Frame']
                        local Image = Settings['Image']

                        function Settings.Open()
                            if Settings.IsOpen then
                                Settings.Close()
                                return
                            end

                            Settings.IsOpen = true
                            Window.CurrentSection = Settings

                            Menu.Tween(
                                Image,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { ImageColor3 = Theme.Accent }
                            )

                            Library.Colors[Image] =
                                { { 'BackgroundColor3', 'Accent' } }

                            Frame.Visible = true
                        end

                        function Settings.Close()
                            if not Settings.IsOpen then
                                return
                            end

                            Settings.IsOpen = false
                            Window.CurrentSection = nil

                            Menu.Tween(
                                Image,
                                NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                { ImageColor3 = NewRGB(128, 128, 128) }
                            )

                            Library.Colors[Image] = nil

                            Frame.Visible = false
                        end
                    end


                    do
                        local Image = Settings['Image']
                        local Frame = Settings['Frame']

                        Connections[#Connections + 1] =
                            Image.MouseButton1Down:Connect(Settings.Open)

                        Connections[#Connections + 1] = Image.MouseEnter:Connect(
                            function()
                                if not Settings.IsOpen then
                                    Menu.Tween(
                                        Image,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        { ImageColor3 = Theme['Text Color'].A }
                                    )
                                end
                            end
                        )

                        Connections[#Connections + 1] = Image.MouseLeave:Connect(
                            function()
                                if not Settings.IsOpen then
                                    Menu.Tween(
                                        Image,
                                        NewTweenInfo(0.15, Enum.EasingStyle.Linear),
                                        { ImageColor3 = NewRGB(128, 128, 128) }
                                    )
                                end
                            end
                        )

                        Connections[#Connections + 1] = SectionFrame
                            :GetPropertyChangedSignal('AbsolutePosition')
                            :Connect(function()
                                local AbsolutePosition =
                                    SectionFrame.AbsolutePosition

                                Frame.Position = NewUDim2(
                                    0,
                                    AbsolutePosition.X + 10,
                                    0,
                                    AbsolutePosition.Y + Element.Offset + 20
                                )
                            end)
                    end

                    SetMetaTable(Settings, Sections)

                    return Settings
                end
            end


            do
                Connections[#Connections + 1] = UserInputService.InputBegan:Connect(
                    function(Input)
                        local Began = Library.InputBegan

                        for i = 1, #Began do
                            Began[i](Input)
                        end
                    end
                )

                Connections[#Connections + 1] = UserInputService.InputEnded:Connect(
                    function(Input)
                        local Ended = Library.InputEnded

                        for i = 1, #Ended do
                            Ended[i](Input)
                        end
                    end
                )

                Connections[#Connections + 1] = UserInputService.InputChanged:Connect(
                    function(Input)
                        local Changed = Library.InputChanged

                        for i = 1, #Changed do
                            Changed[i](Input)
                        end
                    end
                )

                Connections[#Connections + 1] = RenderStepped:Connect(
                    function(DeltaTime)
                        local Render = Library.RenderStepped

                        for i = 1, #Render do
                            Render[i](DeltaTime)
                        end
                    end
                )

                Connections[#Connections + 1] = PlayerAdded:Connect(function(Player)
                    local Added = Library.PlayerAdded

                    for i = 1, #Added do
                        Added[i](Player)
                    end
                end)

                Connections[#Connections + 1] = PlayerRemoving:Connect(
                    function(Player)
                        local Removing = Library.PlayerRemoving

                        for i = 1, #Removing do
                            Removing[i](Player)
                        end
                    end
                )
            end

            Menu.Library = Library
        end
    end;
end;

return Menu;
